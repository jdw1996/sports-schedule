{"version":3,"sources":["date-utils.ts","index.tsx"],"names":["MONTHS","monthName","month","CalendarDay","props","day","className","style","gridArea","week","dayOfWeek","textAlign","date","App","currentDate","Date","useState","getMonth","getFullYear","year","firstDay","setFirstDay","daysInMonth","setDaysInMonth","days","setDays","useEffect","getDay","getDate","numDaysInMonth","numDays","Array","from","length","_","i","Math","floor","games","generateCalendar","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAYMA,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGK,SAASC,EAAUC,GACxB,OAAOF,EAAOE,G,MCdhB,SAASC,EAAYC,GAAuC,IAClDC,EAAQD,EAARC,IACR,OACE,qBAAKC,UAAU,MAAMC,MAAO,CAAEC,SAAS,GAAD,OAAKH,EAAII,KAAO,EAAhB,cAAuBJ,EAAIK,UAA3B,uBAAtC,SACE,sBAAMH,MAAO,CAAEI,UAAW,UAA1B,SAAuCN,EAAIO,SAKjD,SAASC,IACP,IAAMC,EAAc,IAAIC,KADE,EAGAC,mBAASF,EAAYG,YAHrB,mBAGnBf,EAHmB,aAIFc,mBAASF,EAAYI,gBAJnB,mBAInBC,EAJmB,aAKMH,mBAAS,IALf,mBAKnBI,EALmB,KAKTC,EALS,OAMYL,mBAAS,GANrB,mBAMnBM,EANmB,KAMNC,EANM,OAOFP,mBAAgB,IAPd,mBAOnBQ,EAPmB,KAObC,EAPa,KAkB1B,OATAC,qBAAU,WACRL,EAAY,IAAIN,KAAKI,EAAMjB,EAAO,GAAGyB,UACrCJ,EDHG,SAAwBrB,EAAeiB,GAE5C,OAAO,IAAIJ,KAAKI,EAAMjB,EAAQ,EAAG,GAAG0B,UCCnBC,CAAe3B,EAAOiB,MACpC,CAACA,EAAMjB,IAEVwB,qBAAU,WACRD,EDFG,SAA0BK,EAAiBV,GAChD,OAAO,YACFW,MAAMC,KAAK,CAAEC,OAAQH,IAAW,SAACI,EAAGC,GAAJ,MAAW,CAC5CvB,KAAMuB,EAAI,EACVzB,WAAayB,EAAIf,GAAY,EAAK,EAClCX,KAAM2B,KAAKC,OAAOF,EAAIf,GAAY,GAAK,EACvCkB,MAAO,QCJDC,CAAiBjB,EAAaF,MACrC,CAACE,EAAaF,IAGf,sBAAKd,UAAU,MAAf,UACE,+BACGL,EAAUC,GADb,IACsBiB,KAEtB,qBAAKb,UAAU,iBAAf,SACGkB,EAAKgB,KAAI,SAACnC,GAAD,OACR,cAACF,EAAD,CAA4BE,IAAKA,GAAfA,EAAIO,cAOhC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9B,EAAD,MAEF+B,SAASC,eAAe,W","file":"static/js/main.50aa42e5.chunk.js","sourcesContent":["type GameDisplay = {\n  colour: string;\n  label: string;\n};\n\nexport type Day = {\n  date: number;\n  week: number;\n  dayOfWeek: number;\n  games: GameDisplay[];\n};\n\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport function monthName(month: number): string {\n  return MONTHS[month];\n}\n\nexport function numDaysInMonth(month: number, year: number): number {\n  // NB: Months are 0-indexed (i.e. January = 0). Day 0 of the following month is the last day of the given month.\n  return new Date(year, month + 1, 0).getDate();\n}\n\nexport function generateCalendar(numDays: number, firstDay: number): Day[] {\n  return [\n    ...Array.from({ length: numDays }, (_, i) => ({\n      date: i + 1,\n      dayOfWeek: ((i + firstDay) % 7) + 1,\n      week: Math.floor((i + firstDay) / 7) + 1,\n      games: [],\n    })),\n  ];\n}\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Colour, teamColour } from './colours';\nimport { Day, monthName, numDaysInMonth, generateCalendar } from './date-utils';\nimport { Game } from './games';\nimport './index.css';\nimport { NHLGames2021 } from './schedules/nhl-2021';\nimport { MLB, NBA, NFL, NHL, Team } from './teams';\n\ntype CalendarDayProps = {\n  day: Day;\n};\n\nfunction CalendarDay(props: CalendarDayProps): JSX.Element {\n  const { day } = props;\n  return (\n    <div className=\"day\" style={{ gridArea: `${day.week + 1} / ${day.dayOfWeek} / span 1 / span 1` }}>\n      <span style={{ textAlign: 'center' }}>{day.date}</span>\n    </div>\n  );\n}\n\nfunction App(): JSX.Element {\n  const currentDate = new Date();\n\n  const [month, setMonth] = useState(currentDate.getMonth());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [firstDay, setFirstDay] = useState(0);\n  const [daysInMonth, setDaysInMonth] = useState(0);\n  const [days, setDays] = useState<Day[]>([]);\n\n  useEffect(() => {\n    setFirstDay(new Date(year, month, 1).getDay());\n    setDaysInMonth(numDaysInMonth(month, year));\n  }, [year, month]);\n\n  useEffect(() => {\n    setDays(generateCalendar(daysInMonth, firstDay));\n  }, [daysInMonth, firstDay]);\n\n  return (\n    <div className=\"App\">\n      <h2>\n        {monthName(month)} {year}\n      </h2>\n      <div className=\"grid-container\">\n        {days.map((day: Day) => (\n          <CalendarDay key={day.date} day={day} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}