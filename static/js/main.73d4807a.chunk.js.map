{"version":3,"sources":["colours.ts","date-utils.ts","espn-client.ts","teams.ts","index.tsx","presets.ts"],"names":["RED","BRICK","BROWN","ORANGE","YELLOW","GOLD","GREEN","TEAL","SKY","ROYAL","NAVY","PURPLE","PINK","BLACK","SILVER","GREY","BASIC_COLOURS","COLOURS","DEFAULT_COLOUR","MLB_COLOURS","Map","NBA_COLOURS","NFL_COLOURS","NHL_COLOURS","TEAM_COLOURS","MONTHS","monthName","month","URLS","espnToNative","espn","teamOfInterest","shortName","split","away","home","date","Date","timeString","getHours","slice","getMinutes","opponentString","description","getSchedule","league","teamCode","a","has","Error","url","get","fetch","json","events","map","LEAGUES","TEAMS","ARI","ATL","BAL","BOS","CHC","CIN","CLE","COL","CHW","DET","HOU","KC","LAA","LAD","MIA","MIL","MIN","NYM","NYY","OAK","PHI","PIT","SD","SEA","SF","STL","TB","TEX","TOR","WSH","BKN","CHA","CHI","DAL","DEN","GS","IND","LAC","LAL","MEM","NO","NY","OKC","ORL","PHX","POR","SA","SAC","UTH","BUF","CAR","GB","JAX","LAR","LV","NE","NYG","NYJ","TEN","ANA","CBJ","CGY","EDM","FLA","LA","MTL","NJ","NSH","NYI","NYR","OTT","SJ","VAN","VGS","WPG","getTeamId","getLeagueAndTeamCode","teamId","splitId","length","getTeamName","defaultTeam","CalendarDay","props","day","isToday","className","style","gridArea","week","dayOfWeek","textAlign","Array","from","games","entries","sort","game1","game2","localeCompare","game","colour","FavouriteTeamCard","teamName","removeFromFavourites","onClick","TeamPicker","addToFavourites","usedColours","useState","pendingLeague","setPendingLeague","pendingTeam","setPendingTeam","setColour","useEffect","team","includes","getTeamColour","onChange","event","target","value","Object","teamName1","teamName2","colourOption","App","currentDate","getMonth","setMonth","getFullYear","year","setYear","days","setDays","favouriteTeams","setFavouriteTeams","URLSearchParams","pendingFavouriteTeams","setPendingFavouriteTeams","numDays","firstDay","getDate","numDaysInMonth","getDay","_","i","Math","floor","forEach","favTeam","oldDays","newDays","dayGames","set","params","window","location","search","oldFavouriteTeams","newFavouriteTeams","console","log","newMonth","oldYear","oldTeams","newTeams","delete","values","toString","ReactDOM","render","StrictMode","href","idx","query","document","getElementById"],"mappings":"6OAAaA,EAAM,MACNC,EAAQ,QACRC,EAAQ,QACRC,EAAS,SACTC,EAAS,SACTC,EAAO,OACPC,EAAQ,QACRC,EAAO,OACPC,EAAM,MACNC,EAAQ,QACRC,EAAO,OACPC,EAAS,SACTC,EAAO,OACPC,EAAQ,QACRC,EAAS,SACTC,EAAO,OAEdC,EAAgB,CAAChB,EAAKS,EAAOH,EAAOK,EAAQR,EAAQC,EAAQS,EAAOL,GAC5DS,EAAU,CACrBjB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEWG,EAAiBL,EAEjBM,EAAc,IAAIC,IAAsB,CACnD,CAAC,MAAO,CAACnB,EAAOY,EAAOF,EAAQJ,EAAMP,IACrC,CAAC,MAAO,CAACU,EAAMV,EAAKS,EAAOD,EAAKJ,IAChC,CAAC,MAAO,CAACD,EAAQU,IACjB,CAAC,MAAO,CAACb,EAAKU,EAAMJ,IACpB,CAAC,MAAO,CAACG,EAAOT,EAAKU,EAAMF,EAAKP,IAChC,CAAC,MAAO,CAACD,EAAKC,EAAOY,EAAOH,IAC5B,CAAC,MAAO,CAACA,EAAMV,IACf,CAAC,MAAO,CAACW,EAAQG,EAAQD,IACzB,CAAC,MAAO,CAACA,EAAOC,EAAQd,IACxB,CAAC,MAAO,CAACU,EAAMP,EAAQY,IACvB,CAAC,MAAO,CAACZ,EAAQO,EAAMD,IACvB,CAAC,KAAM,CAACA,EAAOJ,EAAMG,IACrB,CAAC,MAAO,CAACR,EAAKU,EAAMF,EAAKJ,IACzB,CAAC,MAAO,CAACK,EAAOD,EAAKR,EAAKU,IAC1B,CAAC,MAAO,CAACG,EAAOL,EAAKD,EAAMJ,EAAQS,EAAMZ,EAAKI,IAC9C,CAAC,MAAO,CAACM,EAAMN,EAAQK,EAAOJ,EAAMC,IACpC,CAAC,MAAO,CAACI,EAAMV,EAAKG,EAAQK,EAAKH,IACjC,CAAC,MAAO,CAACI,EAAON,EAAQU,EAAOD,IAC/B,CAAC,MAAO,CAACF,EAAMI,EAAQC,IACvB,CAAC,MAAO,CAACT,EAAOF,IAChB,CAAC,MAAO,CAACJ,EAAKS,EAAOR,EAAOO,IAC5B,CAAC,MAAO,CAACJ,EAAQS,EAAOb,EAAKK,IAC7B,CAAC,KAAM,CAACH,EAAOE,EAAQD,EAAQO,EAAMF,IACrC,CAAC,MAAO,CAACD,EAAMG,EAAMD,EAAOL,EAAQW,IACpC,CAAC,KAAM,CAACZ,EAAQU,EAAOR,IACvB,CAAC,MAAO,CAACL,EAAKU,EAAMN,EAAQI,IAC5B,CAAC,KAAM,CAACA,EAAKE,EAAMC,EAAQL,EAAOF,EAAQS,IAC1C,CAAC,MAAO,CAACJ,EAAOT,EAAKQ,IACrB,CAAC,MAAO,CAACC,EAAOC,EAAMF,EAAKR,EAAKe,IAChC,CAAC,MAAO,CAACL,EAAMV,EAAKc,EAAQC,MAGxBM,EAAc,IAAID,IAAsB,CAC5C,CAAC,MAAO,CAACpB,EAAKa,EAAOT,EAAQM,EAAMI,EAAQL,EAAOH,IAClD,CAAC,MAAO,CAACO,EAAOC,EAAQC,EAAMP,EAAKE,EAAMV,EAAKS,IAC9C,CAAC,MAAO,CAACH,EAAOD,EAAMD,EAAQD,IAC9B,CAAC,MAAO,CAACI,EAAMI,IACf,CAAC,MAAO,CAACX,EAAKa,EAAOC,IACrB,CAAC,MAAO,CAACb,EAAOG,EAAQM,EAAML,EAAMF,EAAQK,EAAKR,IACjD,CAAC,MAAO,CAACS,EAAOC,EAAMI,EAAQC,EAAMF,EAAOP,IAC3C,CAAC,MAAO,CAACI,EAAMT,EAAOG,EAAQI,IAC9B,CAAC,MAAO,CAACC,EAAOT,EAAKO,EAAMM,IAC3B,CAAC,KAAM,CAACJ,EAAOL,EAAQM,EAAMP,EAAQK,EAAKH,IAC1C,CAAC,MAAO,CAACL,EAAKa,EAAOE,EAAMD,EAAQV,IACnC,CAAC,MAAO,CAACM,EAAMN,EAAQK,IACvB,CAAC,MAAO,CAACT,EAAKS,EAAOI,EAAOL,EAAKL,IACjC,CAAC,MAAO,CAACQ,EAAQP,EAAQS,EAAOL,EAAKC,IACrC,CAAC,MAAO,CAACD,EAAKE,EAAMN,EAAQG,EAAMM,EAAOb,EAAKE,IAC9C,CAAC,MAAO,CAACF,EAAKa,EAAOD,EAAMJ,EAAKJ,EAAQD,EAAQF,IAChD,CAAC,MAAO,CAACK,EAAOJ,EAAOF,EAAKW,IAC5B,CAAC,MAAO,CAACF,EAAOC,EAAMI,EAAQR,EAAOS,EAAMF,IAC3C,CAAC,KAAM,CAACH,EAAML,EAAML,EAAKC,EAAOU,EAAQL,EAAOF,IAC/C,CAAC,KAAM,CAACK,EAAON,EAAQU,IACvB,CAAC,MAAO,CAACL,EAAKL,EAAQC,EAAQM,EAAMD,IACpC,CAAC,MAAO,CAACI,EAAOJ,EAAOK,EAAQX,IAC/B,CAAC,MAAO,CAACM,EAAOT,EAAKa,EAAOR,IAC5B,CAAC,MAAO,CAACM,EAAQR,EAAQC,EAAQS,IACjC,CAAC,MAAO,CAACA,EAAOb,EAAKc,EAAQC,IAC7B,CAAC,MAAO,CAACJ,EAAQG,EAAQD,EAAOE,EAAMP,EAAKR,IAC3C,CAAC,KAAM,CAACa,EAAOC,EAAQP,EAAMK,EAAMT,IACnC,CAAC,MAAO,CAACH,EAAKW,EAAQE,EAAOR,IAC7B,CAAC,MAAO,CAACK,EAAMN,EAAQE,EAAOK,EAAQH,EAAKL,EAAQH,EAAKC,IACxD,CAAC,MAAO,CAACS,EAAMV,EAAKc,EAAQT,EAAMI,EAAOI,MAGrCS,EAAc,IAAIF,IAAsB,CAC5C,CAAC,MAAO,CAACpB,EAAKC,EAAOY,EAAOT,EAAQW,IACpC,CAAC,MAAO,CAACF,EAAOb,EAAKC,EAAOa,EAAQC,IACpC,CAAC,MAAO,CAACJ,EAAQE,EAAOR,EAAMD,EAAQJ,IACtC,CAAC,MAAO,CAACS,EAAOT,IAChB,CAAC,MAAO,CAACQ,EAAKK,EAAOC,IACrB,CAAC,MAAO,CAACJ,EAAMP,IACf,CAAC,MAAO,CAACA,EAAQU,IACjB,CAAC,MAAO,CAACX,EAAOC,IAChB,CAAC,MAAO,CAACO,EAAMI,EAAQL,IACvB,CAAC,MAAO,CAACC,EAAMP,EAAQD,EAAOE,EAAQK,IACtC,CAAC,MAAO,CAACD,EAAKM,EAAQL,EAAOI,IAC7B,CAAC,KAAM,CAACP,EAAOF,EAAQM,IACvB,CAAC,MAAO,CAACA,EAAMV,EAAKQ,IACpB,CAAC,MAAO,CAACC,EAAOC,EAAMG,IACtB,CAAC,MAAO,CAACN,EAAMF,EAAMQ,EAAOT,IAC5B,CAAC,KAAM,CAACJ,EAAKI,IACb,CAAC,MAAO,CAACI,EAAKJ,EAAQM,EAAMD,IAC5B,CAAC,MAAO,CAACA,EAAOL,EAAQM,EAAML,IAC9B,CAAC,KAAM,CAACQ,EAAOC,IACf,CAAC,MAAO,CAACP,EAAMJ,IACf,CAAC,MAAO,CAACQ,EAAQP,IACjB,CAAC,KAAM,CAACM,EAAMI,EAAQd,EAAKS,IAC3B,CAAC,KAAM,CAACJ,EAAMQ,IACd,CAAC,MAAO,CAACH,EAAMV,EAAKS,IACpB,CAAC,MAAO,CAACH,EAAOO,IAChB,CAAC,MAAO,CAACN,EAAMD,EAAOQ,EAAQD,IAC9B,CAAC,MAAO,CAACT,EAAQS,EAAOC,IACxB,CAAC,MAAO,CAACJ,EAAMI,EAAQR,EAAOG,IAC9B,CAAC,KAAM,CAACT,EAAKK,EAAMJ,EAAOY,IAC1B,CAAC,KAAM,CAACb,EAAKG,EAAQY,EAAMF,EAAOX,IAClC,CAAC,MAAO,CAACM,EAAKE,EAAMV,EAAKc,IACzB,CAAC,MAAO,CAACb,EAAOG,EAAQC,EAAMH,MAG1BqB,EAAc,IAAIH,IAAsB,CAC5C,CAAC,MAAO,CAACjB,EAAQE,EAAMQ,EAAOF,EAAQJ,IACtC,CAAC,MAAO,CAACN,EAAOY,EAAOP,EAAOK,EAAQR,EAAQH,IAC9C,CAAC,MAAO,CAACI,EAAQS,EAAOX,EAAOG,IAC/B,CAAC,MAAO,CAACI,EAAOL,EAAQM,EAAMI,EAAQT,EAAMQ,EAAOb,IACnD,CAAC,MAAO,CAACA,EAAKa,EAAOC,EAAQC,EAAMT,EAAOI,EAAMD,EAAOR,IACvD,CAAC,MAAO,CAACS,EAAMV,EAAKc,EAAQV,IAC5B,CAAC,MAAO,CAACJ,EAAKI,EAAQS,EAAOZ,IAC7B,CAAC,MAAO,CAACD,EAAKa,EAAOT,EAAQD,EAAQG,IACrC,CAAC,MAAO,CAACL,EAAOO,EAAKE,EAAMI,EAAQL,EAAOI,EAAOb,EAAKI,IACtD,CAAC,MAAO,CAACE,EAAOO,EAAOC,EAAQT,EAAMD,IACrC,CAAC,MAAO,CAACJ,EAAKW,EAAQG,EAAQC,EAAMF,IACpC,CAAC,MAAO,CAACV,EAAQM,EAAOC,EAAMI,EAAQC,IACtC,CAAC,MAAO,CAACf,EAAKU,EAAML,EAAMD,EAAQH,IAClC,CAAC,KAAM,CAACY,EAAOC,EAAQH,EAAQP,EAAQW,IACvC,CAAC,MAAO,CAACT,EAAOL,EAAOD,EAAKI,IAC5B,CAAC,MAAO,CAACJ,EAAKS,EAAOC,IACrB,CAAC,KAAM,CAACV,EAAKa,EAAOP,IACpB,CAAC,MAAO,CAACF,EAAQM,EAAMI,EAAQL,IAC/B,CAAC,MAAO,CAACA,EAAON,EAAQO,EAAMH,EAAMM,IACpC,CAAC,MAAO,CAACJ,EAAOT,EAAKU,EAAMI,IAC3B,CAAC,MAAO,CAACd,EAAKa,EAAOR,EAAMJ,EAAOG,IAClC,CAAC,MAAO,CAACD,EAAQU,IACjB,CAAC,MAAO,CAACT,EAAQS,EAAOR,EAAMG,EAAKE,EAAMD,EAAOM,IAChD,CAAC,KAAM,CAACR,EAAMM,EAAOC,EAAQX,EAAQY,IACrC,CAAC,MAAO,CAACN,EAAOC,EAAMN,EAAQJ,EAAKC,IACnC,CAAC,KAAM,CAACQ,EAAOK,EAAQD,EAAOE,IAC9B,CAAC,MAAO,CAACN,EAAOC,EAAMJ,EAAOQ,IAC7B,CAAC,MAAO,CAACL,EAAOC,EAAMJ,EAAOL,EAAOG,EAAQJ,EAAKa,EAAOV,EAAQW,IAChE,CAAC,MAAO,CAACT,EAAMU,EAAMF,EAAOT,EAAQJ,EAAKc,IACzC,CAAC,MAAO,CAACJ,EAAMF,EAAKO,EAAMD,EAAQL,EAAOT,IACzC,CAAC,MAAO,CAACA,EAAKU,EAAMD,EAAOJ,EAAMQ,MA0B7BW,GAvBc,IAAIJ,IAAsB,CAC5C,CAAC,MAAO,CAACpB,EAAKK,EAAMK,EAAMT,IAC1B,CAAC,MAAO,CAACO,EAAKP,EAAOG,EAAQS,EAAOH,IACpC,CAAC,MAAO,CAACD,EAAOL,EAAQS,IACxB,CAAC,MAAO,CAACZ,EAAOO,EAAKJ,EAAQC,EAAMU,EAAMF,IACzC,CAAC,MAAO,CAACJ,EAAOT,EAAKK,EAAMG,EAAKM,EAAQF,IACxC,CAAC,MAAO,CAACH,EAAOM,EAAMf,EAAKc,EAAQD,IACnC,CAAC,MAAO,CAACJ,EAAOL,EAAQE,EAAOS,IAC/B,CAAC,MAAO,CAACf,EAAKa,EAAOT,IACrB,CAAC,MAAO,CAACA,EAAQK,EAAOJ,EAAMK,EAAMH,EAAMN,IAC1C,CAAC,MAAO,CAACQ,EAAOL,EAAQC,EAAMJ,IAC9B,CAAC,MAAO,CAACD,EAAKO,EAAMH,EAAQS,EAAOE,IACnC,CAAC,MAAO,CAACP,EAAKE,EAAMN,EAAQC,EAAML,EAAKc,EAAQD,IAC/C,CAAC,MAAO,CAACb,EAAKI,EAAQS,EAAOR,IAC7B,CAAC,MAAO,CAACQ,EAAOC,EAAQC,EAAMP,EAAKH,EAAMD,EAAQO,EAAQX,IACzD,CAAC,MAAO,CAACA,EAAKa,EAAOT,EAAQQ,EAAMN,EAAOD,IAC1C,CAAC,OAAQ,CAACL,EAAKa,EAAOT,EAAQK,EAAOC,EAAMF,EAAKF,IAChD,CAAC,MAAO,CAACI,EAAMJ,EAAOH,EAAQC,EAAQU,IACtC,CAAC,MAAO,CAACJ,EAAMJ,EAAOF,EAAQJ,EAAKE,IACnC,CAAC,MAAO,CAACD,EAAOO,EAAKJ,EAAQC,EAAMQ,IACnC,CAAC,MAAO,CAACT,EAAQS,EAAOR,EAAMG,EAAKP,EAAOK,MAGvB,IAAIc,IAAmC,CAC1D,CAAC,MAAOD,GACR,CAAC,MAAOE,GACR,CAAC,MAAOC,GACR,CAAC,MAAOC,MC/LV,IAAME,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGK,SAASC,EAAUC,GACxB,OAAOF,EAAOE,GCvBhB,IAAMC,EAA4B,IAAIR,IAAI,CACxC,CAAC,MAAO,qEACR,CAAC,MAAO,uEACR,CAAC,MAAO,qEACR,CAAC,MAAO,qEAQV,SAASS,EAAaC,EAAgBC,GAA+B,IAAD,EAC3CD,EAAKE,UAAUC,MAAM,KADsB,mBAC3DC,EAD2D,KACnDC,EADmD,KAE5DC,EAAO,IAAIC,KAAKP,EAAKM,MACrBE,EAAU,WAAO,KAAOF,EAAKG,YAAYC,OAAO,IAAtC,QAA4C,KAAOJ,EAAKK,cAAcD,OAAO,IACzFE,EAAiB,GAMrB,MAAO,CAAEA,eAJPA,EADER,IAASH,EACG,WAAOI,GAEP,WAAOD,GAEEI,aAAYK,YAAY,GAAD,OAAKD,GAAL,OAAsBJ,GAAcF,QAG/E,SAAeQ,EAAtB,oC,4CAAO,WAA2BC,EAAgBC,GAA3C,iBAAAC,EAAA,yDACAnB,EAAKoB,IAAIH,GADT,sBAEG,IAAII,MAAJ,sBAAyBJ,EAAzB,4BAFH,cAICK,EAJD,UAIUtB,EAAKuB,IAAIN,IAJnB,OAI6BC,EAJ7B,sBAKoCM,MAAMF,GAL1C,8BAKgDG,OALhD,cAKCC,EALD,OAKwDA,OALxD,kBAMEA,EAAOC,KAAI,SAACzB,GAAD,OAAUD,EAAaC,EAAMgB,OAN1C,4C,gCC3BMU,EAAU,CAAC,MAAO,MAAO,MAAO,OAyIhCC,EAAQ,IAAIrC,IAAoC,CAC3D,CAAC,MAxIsB,CACvBsC,IAAK,uBACLC,IAAK,iBACLC,IAAK,oBACLC,IAAK,iBACLC,IAAK,eACLC,IAAK,kBACLC,IAAK,0BACLC,IAAK,mBACLC,IAAK,oBACLC,IAAK,iBACLC,IAAK,iBACLC,GAAI,qBACJC,IAAK,qBACLC,IAAK,sBACLC,IAAK,gBACLC,IAAK,oBACLC,IAAK,kBACLC,IAAK,gBACLC,IAAK,mBACLC,IAAK,cACLC,IAAK,wBACLC,IAAK,qBACLC,GAAI,mBACJC,IAAK,mBACLC,GAAI,uBACJC,IAAK,sBACLC,GAAI,iBACJC,IAAK,gBACLC,IAAK,oBACLC,IAAK,yBA2GL,CAAC,MAxGsB,CACvB5B,IAAK,gBACL6B,IAAK,gBACL3B,IAAK,iBACL4B,IAAK,oBACLC,IAAK,gBACL1B,IAAK,sBACL2B,IAAK,mBACLC,IAAK,iBACLzB,IAAK,kBACL0B,GAAI,wBACJzB,IAAK,kBACL0B,IAAK,iBACLC,IAAK,uBACLC,IAAK,qBACLC,IAAK,oBACLzB,IAAK,aACLC,IAAK,kBACLC,IAAK,yBACLwB,GAAI,uBACJC,GAAI,kBACJC,IAAK,wBACLC,IAAK,gBACLvB,IAAK,qBACLwB,IAAK,eACLC,IAAK,yBACLC,GAAI,oBACJC,IAAK,mBACLnB,IAAK,kBACLoB,IAAK,YACLnB,IAAK,uBA2EL,CAAC,MAxEsB,CACvB7B,IAAK,oBACLC,IAAK,kBACLC,IAAK,mBACL+C,IAAK,gBACLC,IAAK,oBACLlB,IAAK,gBACL3B,IAAK,qBACLC,IAAK,mBACL2B,IAAK,iBACLC,IAAK,iBACLzB,IAAK,gBACL0C,GAAI,oBACJzC,IAAK,iBACL0B,IAAK,qBACLgB,IAAK,uBACLzC,GAAI,qBACJ0B,IAAK,uBACLgB,IAAK,mBACLC,GAAI,oBACJxC,IAAK,iBACLE,IAAK,oBACLuC,GAAI,uBACJf,GAAI,qBACJgB,IAAK,kBACLC,IAAK,gBACLrC,IAAK,sBACLC,IAAK,sBACLE,IAAK,mBACLC,GAAI,sBACJE,GAAI,uBACJgC,IAAK,mBACL7B,IAAK,6BAyCL,CAAC,MAtCsB,CACvB8B,IAAK,gBACL3D,IAAK,kBACLG,IAAK,gBACL8C,IAAK,iBACLC,IAAK,sBACLU,IAAK,wBACLC,IAAK,iBACL7B,IAAK,qBACLzB,IAAK,qBACL0B,IAAK,eACLxB,IAAK,oBACLqD,IAAK,kBACLC,IAAK,mBACLC,GAAI,oBACJhD,IAAK,iBACLiD,IAAK,wBACLC,GAAI,oBACJC,IAAK,sBACLC,IAAK,qBACLC,IAAK,mBACLC,IAAK,kBACLlD,IAAK,sBACLC,IAAK,sBACLkD,GAAI,kBACJ9C,IAAK,kBACLC,GAAI,sBACJE,IAAK,sBACL4C,IAAK,oBACLC,IAAK,uBACLC,IAAK,gBACL7C,IAAK,0B,OC/GP,SAAS8C,EAAUxF,EAAgBC,GACjC,MAAM,GAAN,OAAUD,EAAV,YAAoBC,GAGtB,SAASwF,EAAqBC,GAC5B,IAAMC,EAAUD,EAAOtG,MAAM,KAC7B,GAAuB,IAAnBuG,EAAQC,OACV,MAAM,IAAIxF,MAAM,oBAElB,OAAOuF,EAGT,SAASE,EAAY7F,EAAgBC,GAA2B,IAAD,IAC7D,2BAAOW,EAAMN,IAAIN,UAAjB,aAAO,EAAoBC,UAA3B,QAAwC,iBAG1C,SAAS6F,EAAY9F,GACnB,MAAe,QAAXA,EACK,MAEF,MAQT,SAAS+F,EAAYC,GAAuC,IAClDC,EAAiBD,EAAjBC,IAAKC,EAAYF,EAAZE,QACb,OACE,sBACEC,UAAS,cAASD,EAAU,QAAU,IACtCE,MAAO,CAAEC,SAAS,GAAD,OAAKJ,EAAIK,KAAO,EAAhB,cAAuBL,EAAIM,UAA3B,uBAFnB,UAIE,sBAAMH,MAAO,CAAEI,UAAW,UAA1B,SAAuCP,EAAI1G,OAC1CkH,MAAMC,KAAKT,EAAIU,MAAMC,WACnBC,MAAK,kBAAIC,EAAJ,oBAAeC,EAAf,2BAA0BD,EAAMrH,WAAWuH,cAAcD,EAAMtH,eACpEiB,KAAI,gBAAIuG,EAAJ,2BACH,qBAAKd,UAAS,eAAUD,EAAU,IAAM,IAA1B,OAA+Be,EAAKC,QAAlD,SACGD,EAAKnH,aADyDmH,EAAKnH,mBAchF,SAASqH,EAAkBnB,GAA6C,IAC9DoB,EAA2CpB,EAA3CoB,SAAUF,EAAiClB,EAAjCkB,OAAQG,EAAyBrB,EAAzBqB,qBAE1B,OACE,sBAAKlB,UAAS,yBAAoBe,GAAlC,UACE,+BAAOE,IACP,wBAAQjB,UAAU,gBAAgBmB,QAASD,EAA3C,SAtEgB,oBAkFtB,SAASE,EAAWvB,GAAyB,IAAD,EAClCwB,EAAiCxB,EAAjCwB,gBAAiBC,EAAgBzB,EAAhByB,YADiB,EAGAC,mBAAS/G,EAAQ,IAHjB,mBAGnCgH,EAHmC,KAGpBC,EAHoB,OAIJF,mBAAS5B,EAAY6B,IAJjB,mBAInCE,EAJmC,KAItBC,EAJsB,OAKdJ,mBAASrJ,GALK,mBAKnC6I,EALmC,KAK3Ba,EAL2B,KAiB1C,OAVAC,qBAAU,WAAO,IAAD,EACRH,KAAW,UAAKjH,EAAMN,IAAIqH,UAAf,QAAiC,KAChDG,EAAehC,EAAY6B,MAE5B,CAACA,IAEJK,qBAAU,WACRD,EJ+FG,SAAuB/H,EAAgBiI,EAAcR,GAAgC,IAAD,wCACpE9I,EAAa2B,IAAIN,UADmD,aACpE,EAA0BM,IAAI2H,UADsC,QAC7B,IAD6B,IACzF,2BAAgE,CAAC,IAAtDf,EAAqD,QAC9D,IAAKO,EAAYS,SAAShB,GACxB,OAAOA,GAH8E,kDAMpE/I,GANoE,IAMzF,2BAAoC,CAAC,IAA1B+I,EAAyB,QAClC,IAAKO,EAAYS,SAAShB,GACxB,OAAOA,GAR8E,kDAWpE9I,GAXoE,IAWzF,2BAA8B,CAAC,IAApB8I,EAAmB,QAC5B,IAAKO,EAAYS,SAAShB,GACxB,OAAOA,GAb8E,8BAgBzF,OAAOlJ,EI/GKmK,CAAcR,EAAeE,EAAaJ,MACnD,CAACE,EAAeE,IAGjB,sBAAK1B,UAAS,mBAAce,GAA5B,UACE,wBACEf,UAAU,gBACViC,SAAU,SAACC,GACTT,EAAiBS,EAAMC,OAAOC,QAEhCA,MAAOZ,EALT,SAOGhH,EAAQD,KAAI,SAACV,GAAD,OACX,wBAAqBuI,MAAOvI,EAA5B,SACGA,GADUA,QAKjB,wBACEmG,UAAU,cACViC,SAAU,SAACC,GACTP,EAAeO,EAAMC,OAAOC,QAE9BA,MAAOV,EALT,SAOGW,OAAO5B,QAAP,UAAehG,EAAMN,IAAIqH,UAAzB,QAA2C,IACzCd,MAAK,kBAAI4B,EAAJ,oBAAmBC,EAAnB,2BAAkCD,EAAUzB,cAAc0B,MAC/DhI,KAAI,mCAAET,EAAF,KAAYmH,EAAZ,YACH,wBAAuBmB,MAAOtI,EAA9B,SACGmH,GADUnH,QAKnB,wBACEkG,UAAU,gBACViC,SAAU,SAACC,GACTN,EAAUM,EAAMC,OAAOC,QAEzBA,MAAOrB,EALT,SAOG9I,EAAQsC,KAAI,SAACiI,GAAD,OACX,wBAA2BJ,MAAOI,EAAlC,SACGA,GADUA,QAKjB,wBACExC,UAAU,gBACVmB,QAAS,WACPE,EAAgBG,EAAeE,EAAaX,IAHhD,SA/Ia,cA2JnB,SAAS0B,KACP,IAAMC,EAAc,IAAIrJ,KADE,EAGAkI,mBAASmB,EAAYC,YAHrB,mBAGnBhK,EAHmB,KAGZiK,EAHY,OAIFrB,mBAASmB,EAAYG,eAJnB,mBAInBC,EAJmB,KAIbC,EAJa,OAKFxB,mBAAgB,IALd,mBAKnByB,EALmB,KAKbC,EALa,OAMkB1B,mBAAqC,IAAInJ,IAAI,KAN/D,mBAMnB8K,EANmB,KAMHC,EANG,OAOgC5B,mBAAS,IAAI6B,iBAP7C,mBAOnBC,EAPmB,KAOIC,EAPJ,KAS1BzB,qBAAU,WH9IL,IAA0B0B,EAAiBC,EG+I9CP,GH/I6BM,EAL1B,SAAwB5K,EAAemK,GAE5C,OAAO,IAAIzJ,KAAKyJ,EAAMnK,EAAQ,EAAG,GAAG8K,UGkJTC,CAAe/K,EAAOmK,GH/IDU,EG+IQ,IAAInK,KAAKyJ,EAAMnK,EAAO,GAAGgL,SH9I1E,YACFrD,MAAMC,KAAK,CAAEd,OAAQ8D,IAAW,SAACK,EAAGC,GAAJ,MAAW,CAC5CzK,KAAMyK,EAAI,EACVzD,WAAayD,EAAIL,GAAY,EAAK,EAClCrD,KAAM2D,KAAKC,OAAOF,EAAIL,GAAY,GAAK,EACvChD,MAAO,IAAIpI,aG0IZ,CAAC0K,EAAMnK,IAEVkJ,qBAAU,WACRqB,EAAec,SAAQ,SAACC,GACtBhB,GAAQ,SAACiB,GACP,IADmB,EACbC,EAAO,YAAOD,GADD,cAEAD,EAAQzD,OAFR,IAEnB,2BAAkC,CAAC,IAAxBM,EAAuB,QAChC,GAAIA,EAAK1H,KAAKyJ,gBAAkBC,GAAQhC,EAAK1H,KAAKuJ,aAAehK,EAAO,CACtE,IAAMmH,EAAG,eAAQqE,EAAQrD,EAAK1H,KAAKqK,UAAY,IACzCW,EAAW,IAAIhM,IAAI0H,EAAIU,OAC7B4D,EAASC,IAAIvD,EAAKnH,YAAlB,2BAAoCmH,GAApC,IAA0CC,OAAQkD,EAAQlD,UAC1DjB,EAAIU,MAAQ4D,EACZD,EAAQrD,EAAK1H,KAAKqK,UAAY,GAAK3D,IARpB,8BAWnB,OAAOqE,UAGV,CAACrB,EAAMnK,EAAOuK,IAEjBrB,qBAAU,WACR,IAAMyC,EAAS,IAAIlB,gBAAgBmB,OAAOC,SAASC,QACnDnB,EAAyBgB,GACzBA,EAAON,QAAP,uCAAe,WAAOjD,EAAQxB,GAAf,uBAAAxF,EAAA,mEAEPmJ,EAAelJ,IAAIuF,GAFZ,0DAKgBD,EAAqBC,GALrC,mBAKJ1F,EALI,KAKIC,EALJ,cAMSF,EAAYC,EAAQC,GAN7B,OAML0G,EANK,OAOX2C,GAAkB,SAACuB,GACjB,IAAMC,EAAoB,IAAIvM,IAAIsM,GAOlC,OANAC,EAAkBN,IAAI9E,EAAQ,CAC5B1F,SACAC,WACAiH,OAAQ9I,EAAQ8J,SAAShB,GAAUA,EAAS7I,EAC5CsI,UAEKmE,KAfE,kDAkBXC,QAAQC,IAAR,MAlBW,0DAAf,2DAqBC,IAsBH,OACE,sBAAK7E,UAAU,MAAf,UACE,+BACE,wBACEA,UAAU,kBACVmB,QAAS,WACP,IAAI2D,EAAWnM,EAAQ,EACnBmM,EAAW,IACb/B,GAAQ,SAACgC,GAAD,OAAaA,EAAU,KAC/BD,GAAY,IAEdlC,EAASkC,IARb,SAzOgB,WAsPfpM,EAAUC,GAdb,IAcsBmK,EACpB,wBACE9C,UAAU,cACVmB,QAAS,WACP,IAAI2D,EAAWnM,EAAQ,EACnBmM,EAAW,KACb/B,GAAQ,SAACgC,GAAD,OAAaA,EAAU,KAC/BD,GAAY,IAEdlC,EAASkC,IARb,SAtPY,oBAoQd,qBAAK9E,UAAU,iBAAf,SACGgD,EAAKzI,KAAI,SAACuF,GAAD,OACR,cAACF,EAAD,CAEEE,IAAKA,EACLC,QACE2C,EAAYe,YAAc3D,EAAI1G,MAC9BsJ,EAAYC,aAAehK,GAC3B+J,EAAYG,gBAAkBC,GAL3BhD,EAAI1G,WAUdkH,MAAMC,KAAK8C,EAAsB5C,WAAWlG,KAAI,YAAuB,IAAD,mBAApBgF,EAAoB,KAAZwB,EAAY,OAC1CzB,EAAqBC,GADqB,mBAC9D1F,EAD8D,KACtDC,EADsD,KAErE,OACE,cAACkH,EAAD,CAEEC,SAAUvB,EAAY7F,EAAQC,GAC9BiH,OAAQA,EACRG,qBAAsB,YA/DH,SAACrH,EAAgBC,GAC5CwJ,GAAyB,SAAC0B,GACxB,IAAMC,EAAW,IAAI7B,gBAAgB4B,GAErC,OADAC,EAASC,OAAO7F,EAAUxF,EAAQC,IAC3BmL,KA4DC/D,CAAqBrH,EAAQC,KAJ1ByF,MASX,cAAC6B,EAAD,CACEE,YAAahB,MAAMC,KAAK8C,EAAsB8B,UAAU5K,KAAI,SAACwG,GAAD,OAAYA,KACxEM,gBA/EkB,SAACxH,EAAgBC,EAAkBiH,GACzDuC,GAAyB,SAAC0B,GACxB,IAAMC,EAAW,IAAI7B,gBAAgB4B,GAErC,OADAC,EAASZ,IAAIhF,EAAUxF,EAAQC,GAAWiH,GACnCkE,QA6EP,wBAAQ9D,QAjES,WACnBoD,OAAOC,SAASC,OAASpB,EAAsB+B,YAgE7C,8BAKNC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC9C,GAAD,IACA,iEACmC,IACjC,mBAAG+C,KAAK,sEAAR,sBAFF,iIAKA,kNAE4E,IAC1E,mBAAGA,KAAK,wFAAR,kBAHF,8DAIoD,ICjUb,CACzC,CAAC,UAAW,+BACZ,CAAC,UAAW,2CACZ,CAAC,YAAa,kCACd,CAAC,SAAU,yDACX,CAAC,UAAW,iCACZ,CAAC,UAAW,0EACZ,CAAC,aAAc,+BACf,CAAC,YAAa,8CACd,CAAC,oBAAqB,yDACtB,CAAC,SAAU,4DACX,CAAC,UAAW,4DACZ,CAAC,UAAW,4CACZ,CAAC,eAAgB,iCACjB,CAAC,cAAe,4BAChB,CAAC,YAAa,8BACd,CAAC,cAAe,qFAChB,CAAC,QAAS,wDACV,CAAC,yBAA0B,0DAC3B,CAAC,cAAe,4BAChB,CACE,WACA,6HAEF,CAAC,iBAAkB,2CACnB,CAAC,eAAgB,0DACjB,CAAC,UAAW,2DACZ,CAAC,aAAc,6CACf,CAAC,yBAA0B,oEAC3B,CAAC,UAAW,8BACZ,CAAC,YAAa,8BACd,CAAC,YAAa,uCACd,CAAC,YAAa,4CACd,CAAC,UAAW,2CACZ,CAAC,aAAc,0DACf,CAAC,YAAa,8CD+RDjL,KAAI,WAAoBkL,GAApB,uBAAEjB,EAAF,KAAYkB,EAAZ,YACX,qCACW,IAARD,GAAa,sCACd,mBAAkBD,KAAI,0BAAqBE,GAA3C,SACGlB,GADKA,SARd,+LAiBFmB,SAASC,eAAe,W","file":"static/js/main.73d4807a.chunk.js","sourcesContent":["export const RED = 'Red';\nexport const BRICK = 'Brick';\nexport const BROWN = 'Brown';\nexport const ORANGE = 'Orange';\nexport const YELLOW = 'Yellow';\nexport const GOLD = 'Gold';\nexport const GREEN = 'Green';\nexport const TEAL = 'Teal';\nexport const SKY = 'Sky';\nexport const ROYAL = 'Royal';\nexport const NAVY = 'Navy';\nexport const PURPLE = 'Purple';\nexport const PINK = 'Pink';\nexport const BLACK = 'Black';\nexport const SILVER = 'Silver';\nexport const GREY = 'Grey';\n\nconst BASIC_COLOURS = [RED, ROYAL, GREEN, PURPLE, ORANGE, YELLOW, BLACK, SKY];\nexport const COLOURS = [\n  RED,\n  BRICK,\n  BROWN,\n  ORANGE,\n  YELLOW,\n  GOLD,\n  GREEN,\n  TEAL,\n  SKY,\n  ROYAL,\n  NAVY,\n  PURPLE,\n  PINK,\n  BLACK,\n  SILVER,\n  GREY,\n];\nexport const DEFAULT_COLOUR = BLACK;\n\nexport const MLB_COLOURS = new Map<string, string[]>([\n  ['ARI', [BRICK, BLACK, PURPLE, TEAL, RED]],\n  ['ATL', [NAVY, RED, ROYAL, SKY, YELLOW]],\n  ['BAL', [ORANGE, BLACK]],\n  ['BOS', [RED, NAVY, GREEN]],\n  ['CHC', [ROYAL, RED, NAVY, SKY, BRICK]],\n  ['CIN', [RED, BRICK, BLACK, NAVY]],\n  ['CLE', [NAVY, RED]],\n  ['COL', [PURPLE, SILVER, BLACK]],\n  ['CHW', [BLACK, SILVER, RED]],\n  ['DET', [NAVY, ORANGE, GREY]],\n  ['HOU', [ORANGE, NAVY, ROYAL]],\n  ['KC', [ROYAL, GOLD, SKY]],\n  ['LAA', [RED, NAVY, SKY, YELLOW]],\n  ['LAD', [ROYAL, SKY, RED, NAVY]],\n  ['MIA', [BLACK, SKY, TEAL, ORANGE, PINK, RED, YELLOW]],\n  ['MIL', [NAVY, YELLOW, ROYAL, GOLD, GREEN]],\n  ['MIN', [NAVY, RED, ORANGE, SKY, GOLD]],\n  ['NYM', [ROYAL, ORANGE, BLACK, PINK]],\n  ['NYY', [NAVY, SILVER, GREY]],\n  ['OAK', [GREEN, YELLOW]],\n  ['PHI', [RED, ROYAL, BRICK, SKY]],\n  ['PIT', [YELLOW, BLACK, RED, GOLD]],\n  ['SD', [BROWN, YELLOW, ORANGE, NAVY, SKY]],\n  ['SEA', [TEAL, NAVY, ROYAL, YELLOW, GREY]],\n  ['SF', [ORANGE, BLACK, GOLD]],\n  ['STL', [RED, NAVY, YELLOW, SKY]],\n  ['TB', [SKY, NAVY, PURPLE, GREEN, YELLOW, BLACK]],\n  ['TEX', [ROYAL, RED, SKY]],\n  ['TOR', [ROYAL, NAVY, SKY, RED, GREY]],\n  ['WSH', [NAVY, RED, SILVER, GREY]],\n]);\n\nconst NBA_COLOURS = new Map<string, string[]>([\n  ['ATL', [RED, BLACK, YELLOW, NAVY, SILVER, ROYAL, GREEN]],\n  ['BKN', [BLACK, SILVER, GREY, SKY, NAVY, RED, ROYAL]],\n  ['BOS', [GREEN, GOLD, YELLOW, ORANGE]],\n  ['CHA', [TEAL, PURPLE]],\n  ['CHI', [RED, BLACK, SILVER]],\n  ['CLE', [BRICK, YELLOW, NAVY, GOLD, ORANGE, SKY, RED]],\n  ['DAL', [ROYAL, NAVY, SILVER, GREY, BLACK, GREEN]],\n  ['DEN', [NAVY, BRICK, YELLOW, SKY]],\n  ['DET', [ROYAL, RED, TEAL, BLACK]],\n  ['GS', [ROYAL, YELLOW, NAVY, ORANGE, SKY, GOLD]],\n  ['HOU', [RED, BLACK, GREY, SILVER, YELLOW]],\n  ['IND', [NAVY, YELLOW, ROYAL]],\n  ['LAC', [RED, ROYAL, BLACK, SKY, ORANGE]],\n  ['LAL', [PURPLE, YELLOW, BLACK, SKY, ROYAL]],\n  ['MEM', [SKY, NAVY, YELLOW, TEAL, BLACK, RED, BROWN]],\n  ['MIA', [RED, BLACK, PINK, SKY, YELLOW, ORANGE, BRICK]],\n  ['MIL', [GREEN, BROWN, RED, PURPLE]],\n  ['MIN', [ROYAL, NAVY, SILVER, GREEN, GREY, BLACK]],\n  ['NO', [NAVY, GOLD, RED, BRICK, PURPLE, GREEN, YELLOW]],\n  ['NY', [ROYAL, ORANGE, BLACK]],\n  ['OKC', [SKY, ORANGE, YELLOW, NAVY, ROYAL]],\n  ['ORL', [BLACK, ROYAL, SILVER, ORANGE]],\n  ['PHI', [ROYAL, RED, BLACK, GOLD]],\n  ['PHX', [PURPLE, ORANGE, YELLOW, BLACK]],\n  ['POR', [BLACK, RED, SILVER, GREY]],\n  ['SAC', [PURPLE, SILVER, BLACK, GREY, SKY, RED]],\n  ['SA', [BLACK, SILVER, TEAL, PINK, ORANGE]],\n  ['TOR', [RED, PURPLE, BLACK, GOLD]],\n  ['UTH', [NAVY, YELLOW, GREEN, PURPLE, SKY, ORANGE, RED, BRICK]],\n  ['WSH', [NAVY, RED, SILVER, GOLD, ROYAL, BLACK]],\n]);\n\nconst NFL_COLOURS = new Map<string, string[]>([\n  ['ARI', [RED, BRICK, BLACK, YELLOW, GREY]],\n  ['ATL', [BLACK, RED, BRICK, SILVER, GREY]],\n  ['BAL', [PURPLE, BLACK, GOLD, YELLOW, RED]],\n  ['BUF', [ROYAL, RED]],\n  ['CAR', [SKY, BLACK, SILVER]],\n  ['CHI', [NAVY, ORANGE]],\n  ['CIN', [ORANGE, BLACK]],\n  ['CLE', [BROWN, ORANGE]],\n  ['DAL', [NAVY, SILVER, ROYAL]],\n  ['DEN', [NAVY, ORANGE, BROWN, YELLOW, ROYAL]],\n  ['DET', [SKY, SILVER, ROYAL, BLACK]],\n  ['GB', [GREEN, YELLOW, NAVY]],\n  ['HOU', [NAVY, RED, SKY]],\n  ['IND', [ROYAL, NAVY, BLACK]],\n  ['JAX', [TEAL, GOLD, BLACK, YELLOW]],\n  ['KC', [RED, YELLOW]],\n  ['LAC', [SKY, YELLOW, NAVY, ROYAL]],\n  ['LAR', [ROYAL, YELLOW, NAVY, GOLD]],\n  ['LV', [BLACK, SILVER]],\n  ['MIA', [TEAL, ORANGE]],\n  ['MIN', [PURPLE, YELLOW]],\n  ['NE', [NAVY, SILVER, RED, ROYAL]],\n  ['NO', [GOLD, BLACK]],\n  ['NYG', [NAVY, RED, ROYAL]],\n  ['NYJ', [GREEN, BLACK]],\n  ['PHI', [TEAL, GREEN, SILVER, BLACK]],\n  ['PIT', [YELLOW, BLACK, SILVER]],\n  ['SEA', [NAVY, SILVER, GREEN, ROYAL]],\n  ['SF', [RED, GOLD, BRICK, BLACK]],\n  ['TB', [RED, ORANGE, GREY, BLACK, BROWN]],\n  ['TEN', [SKY, NAVY, RED, SILVER]],\n  ['WSH', [BRICK, YELLOW, GOLD, BROWN]],\n]);\n\nconst NHL_COLOURS = new Map<string, string[]>([\n  ['ANA', [ORANGE, GOLD, BLACK, PURPLE, TEAL]],\n  ['ARI', [BRICK, BLACK, GREEN, PURPLE, ORANGE, RED]],\n  ['BOS', [YELLOW, BLACK, BROWN, GOLD]],\n  ['BUF', [ROYAL, YELLOW, NAVY, SILVER, GOLD, BLACK, RED]],\n  ['CAR', [RED, BLACK, SILVER, GREY, GREEN, NAVY, ROYAL, BRICK]],\n  ['CBJ', [NAVY, RED, SILVER, YELLOW]],\n  ['CGY', [RED, YELLOW, BLACK, BRICK]],\n  ['CHI', [RED, BLACK, YELLOW, ORANGE, GREEN]],\n  ['COL', [BRICK, SKY, NAVY, SILVER, ROYAL, BLACK, RED, YELLOW]],\n  ['DAL', [GREEN, BLACK, SILVER, GOLD, YELLOW]],\n  ['DET', [RED, PURPLE, SILVER, GREY, BLACK]],\n  ['EDM', [ORANGE, ROYAL, NAVY, SILVER, GREY]],\n  ['FLA', [RED, NAVY, GOLD, YELLOW, BRICK]],\n  ['LA', [BLACK, SILVER, PURPLE, YELLOW, GREY]],\n  ['MIN', [GREEN, BRICK, RED, YELLOW]],\n  ['MTL', [RED, ROYAL, NAVY]],\n  ['NJ', [RED, BLACK, GREEN]],\n  ['NSH', [YELLOW, NAVY, SILVER, ROYAL]],\n  ['NYI', [ROYAL, ORANGE, NAVY, TEAL, BLACK]],\n  ['NYR', [ROYAL, RED, NAVY, SILVER]],\n  ['OTT', [RED, BLACK, GOLD, BRICK, YELLOW]],\n  ['PHI', [ORANGE, BLACK]],\n  ['PIT', [YELLOW, BLACK, GOLD, SKY, NAVY, ROYAL, GREY]],\n  ['SJ', [TEAL, BLACK, SILVER, ORANGE, GREY]],\n  ['STL', [ROYAL, NAVY, YELLOW, RED, BRICK]],\n  ['TB', [ROYAL, SILVER, BLACK, GREY]],\n  ['TOR', [ROYAL, NAVY, GREEN, SILVER]],\n  ['VAN', [ROYAL, NAVY, GREEN, BRICK, YELLOW, RED, BLACK, ORANGE, SILVER]],\n  ['VGS', [GOLD, GREY, BLACK, YELLOW, RED, SILVER]],\n  ['WPG', [NAVY, SKY, GREY, SILVER, ROYAL, RED]],\n  ['WSH', [RED, NAVY, ROYAL, GOLD, BLACK]],\n]);\n\nconst EPL_COLOURS = new Map<string, string[]>([\n  ['ARS', [RED, GOLD, NAVY, BRICK]],\n  ['AVL', [SKY, BRICK, YELLOW, BLACK, NAVY]],\n  ['BHA', [ROYAL, YELLOW, BLACK]],\n  ['BUR', [BRICK, SKY, YELLOW, GOLD, GREY, BLACK]],\n  ['CHE', [ROYAL, RED, GOLD, SKY, SILVER, PINK]],\n  ['CRY', [ROYAL, GREY, RED, SILVER, BLACK]],\n  ['EVE', [ROYAL, YELLOW, GREEN, GREY]],\n  ['FUL', [RED, BLACK, YELLOW]],\n  ['LEE', [YELLOW, ROYAL, GOLD, NAVY, TEAL, BRICK]],\n  ['LEI', [ROYAL, YELLOW, GOLD, BRICK]],\n  ['LIV', [RED, TEAL, YELLOW, BLACK, GREY]],\n  ['MNC', [SKY, NAVY, YELLOW, GOLD, RED, SILVER, BLACK]],\n  ['MAN', [RED, YELLOW, BLACK, GOLD]],\n  ['NEW', [BLACK, SILVER, GREY, SKY, GOLD, YELLOW, PURPLE, RED]],\n  ['SHU', [RED, BLACK, YELLOW, PINK, GREEN, GOLD]],\n  ['SOUT', [RED, BLACK, YELLOW, ROYAL, NAVY, SKY, GREEN]],\n  ['TOT', [NAVY, GREEN, ORANGE, YELLOW, SILVER]],\n  ['WBA', [NAVY, GREEN, YELLOW, RED, BROWN]],\n  ['WHU', [BRICK, SKY, YELLOW, GOLD, BLACK]],\n  ['WOL', [YELLOW, BLACK, GOLD, SKY, BRICK, GREEN]],\n]);\n\nconst TEAM_COLOURS = new Map<string, Map<string, string[]>>([\n  ['MLB', MLB_COLOURS],\n  ['NBA', NBA_COLOURS],\n  ['NFL', NFL_COLOURS],\n  ['NHL', NHL_COLOURS],\n]);\n\nexport function getTeamColour(league: string, team: string, usedColours: string[]): string {\n  for (const colour of TEAM_COLOURS.get(league)?.get(team) ?? []) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  for (const colour of BASIC_COLOURS) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  for (const colour of COLOURS) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  return BLACK;\n}\n","import { Game } from './games';\n\nexport type Day = {\n  date: number;\n  week: number;\n  dayOfWeek: number;\n  games: Map<string, Game>;\n};\n\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport function monthName(month: number): string {\n  return MONTHS[month];\n}\n\nexport function numDaysInMonth(month: number, year: number): number {\n  // NB: Months are 0-indexed (i.e. January = 0). Day 0 of the following month is the last day of the given month.\n  return new Date(year, month + 1, 0).getDate();\n}\n\nexport function generateCalendar(numDays: number, firstDay: number): Day[] {\n  return [\n    ...Array.from({ length: numDays }, (_, i) => ({\n      date: i + 1,\n      dayOfWeek: ((i + firstDay) % 7) + 1,\n      week: Math.floor((i + firstDay) / 7) + 1,\n      games: new Map(),\n    })),\n  ];\n}\n","import { Game } from './games';\n\nconst URLS: Map<string, string> = new Map([\n  ['MLB', 'https://site.api.espn.com/apis/site/v2/sports/baseball/mlb/teams/'],\n  ['NBA', 'https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/'],\n  ['NFL', 'https://site.api.espn.com/apis/site/v2/sports/football/nfl/teams/'],\n  ['NHL', 'https://site.api.espn.com/apis/site/v2/sports/hockey/nhl/teams/'],\n]);\n\ntype ESPNGame = {\n  date: string;\n  shortName: string;\n};\n\nfunction espnToNative(espn: ESPNGame, teamOfInterest: string): Game {\n  const [away, , home] = espn.shortName.split(' ');\n  const date = new Date(espn.date);\n  const timeString = `${('00' + date.getHours()).slice(-2)}${('00' + date.getMinutes()).slice(-2)}`;\n  let opponentString = '';\n  if (away === teamOfInterest) {\n    opponentString = `@${home}`;\n  } else {\n    opponentString = `v${away}`;\n  }\n  return { opponentString, timeString, description: `${opponentString}${timeString}`, date };\n}\n\nexport async function getSchedule(league: string, teamCode: string): Promise<Game[]> {\n  if (!URLS.has(league)) {\n    throw new Error(`Given value ${league} is not a known league.`);\n  }\n  const url = `${URLS.get(league)}${teamCode}/schedule`;\n  const events: ESPNGame[] = (await (await fetch(url)).json()).events;\n  return events.map((espn) => espnToNative(espn, teamCode));\n}\n","export const LEAGUES = ['MLB', 'NBA', 'NFL', 'NHL'];\n\nexport const MLB_TEAMS = {\n  ARI: 'Arizona Diamondbacks',\n  ATL: 'Atlanta Braves',\n  BAL: 'Baltimore Orioles',\n  BOS: 'Boston Red Sox',\n  CHC: 'Chicago Cubs',\n  CIN: 'Cincinnati Reds',\n  CLE: 'Cleveland Baseball Team',\n  COL: 'Colorado Rockies',\n  CHW: 'Chicago White Sox',\n  DET: 'Detroit Tigers',\n  HOU: 'Houston Astros',\n  KC: 'Kansas City Royals',\n  LAA: 'Los Angeles Angels',\n  LAD: 'Los Angeles Dodgers',\n  MIA: 'Miami Marlins',\n  MIL: 'Milwaukee Brewers',\n  MIN: 'Minnesota Twins',\n  NYM: 'New York Mets',\n  NYY: 'New York Yankees',\n  OAK: \"Oakland A's\",\n  PHI: 'Philadelphia Phillies',\n  PIT: 'Pittsburgh Pirates',\n  SD: 'San Diego Padres',\n  SEA: 'Seattle Mariners',\n  SF: 'San Francisco Giants',\n  STL: 'St. Louis Cardinals',\n  TB: 'Tampa Bay Rays',\n  TEX: 'Texas Rangers',\n  TOR: 'Toronto Blue Jays',\n  WSH: 'Washington Nationals',\n};\n\nexport const NBA_TEAMS = {\n  ATL: 'Atlanta Hawks',\n  BKN: 'Brooklyn Nets',\n  BOS: 'Boston Celtics',\n  CHA: 'Charlotte Hornets',\n  CHI: 'Chicago Bulls',\n  CLE: 'Cleveland Cavaliers',\n  DAL: 'Dallas Mavericks',\n  DEN: 'Denver Nuggets',\n  DET: 'Detroit Pistons',\n  GS: 'Golden State Warriors',\n  HOU: 'Houston Rockets',\n  IND: 'Indiana Pacers',\n  LAC: 'Los Angeles Clippers',\n  LAL: 'Los Angeles Lakers',\n  MEM: 'Memphis Grizzlies',\n  MIA: 'Miami Heat',\n  MIL: 'Milwaukee Bucks',\n  MIN: 'Minnesota Timberwolves',\n  NO: 'New Orleans Pelicans',\n  NY: 'New York Knicks',\n  OKC: 'Oklahoma City Thunder',\n  ORL: 'Orlando Magic',\n  PHI: 'Philadelphia 76ers',\n  PHX: 'Phoenix Suns',\n  POR: 'Portland Trail Blazers',\n  SA: 'San Antonio Spurs',\n  SAC: 'Sacramento Kings',\n  TOR: 'Toronto Raptors',\n  UTH: 'Utah Jazz',\n  WSH: 'Washington Wizards',\n};\n\nexport const NFL_TEAMS = {\n  ARI: 'Arizona Cardinals',\n  ATL: 'Atlanta Falcons',\n  BAL: 'Baltimore Ravens',\n  BUF: 'Buffalo Bills',\n  CAR: 'Carolina Panthers',\n  CHI: 'Chicago Bears',\n  CIN: 'Cincinnati Bengals',\n  CLE: 'Cleveland Browns',\n  DAL: 'Dallas Cowboys',\n  DEN: 'Denver Broncos',\n  DET: 'Detroit Lions',\n  GB: 'Green Bay Packers',\n  HOU: 'Houston Texans',\n  IND: 'Indianapolis Colts',\n  JAX: 'Jacksonville Jaguars',\n  KC: 'Kansas City Chiefs',\n  LAC: 'Los Angeles Chargers',\n  LAR: 'Los Angeles Rams',\n  LV: 'Las Vegas Raiders',\n  MIA: 'Miami Dolphins',\n  MIN: 'Minnesota Vikings',\n  NE: 'New England Patriots',\n  NO: 'New Orleans Saints',\n  NYG: 'New York Giants',\n  NYJ: 'New York Jets',\n  PHI: 'Philadelphia Eagles',\n  PIT: 'Pittsburgh Steelers',\n  SEA: 'Seattle Seahawks',\n  SF: 'San Francisco 49ers',\n  TB: 'Tampa Bay Buccaneers',\n  TEN: 'Tennessee Titans',\n  WSH: 'Washington Football Team',\n};\n\nexport const NHL_TEAMS = {\n  ANA: 'Anaheim Ducks',\n  ARI: 'Arizona Coyotes',\n  BOS: 'Boston Bruins',\n  BUF: 'Buffalo Sabres',\n  CAR: 'Carolina Hurricanes',\n  CBJ: 'Columbus Blue Jackets',\n  CGY: 'Calgary Flames',\n  CHI: 'Chicago Blackhawks',\n  COL: 'Colorado Avalanche',\n  DAL: 'Dallas Stars',\n  DET: 'Detroit Red Wings',\n  EDM: 'Edmonton Oilers',\n  FLA: 'Florida Panthers',\n  LA: 'Los Angeles Kings',\n  MIN: 'Minnesota Wild',\n  MTL: 'Montréal Canadiens',\n  NJ: 'New Jersey Devils',\n  NSH: 'Nashville Predators',\n  NYI: 'New York Islanders',\n  NYR: 'New York Rangers',\n  OTT: 'Ottawa Senators',\n  PHI: 'Philadelphia Flyers',\n  PIT: 'Pittsburgh Penguins',\n  SJ: 'San Jose Sharks',\n  STL: 'St. Louis Blues',\n  TB: 'Tampa Bay Lightning',\n  TOR: 'Toronto Maple Leafs',\n  VAN: 'Vancouver Canucks',\n  VGS: 'Vegas Golden Knights',\n  WPG: 'Winnipeg Jets',\n  WSH: 'Washington Capitals',\n};\n\nexport const TEAMS = new Map<string, Record<string, string>>([\n  ['MLB', MLB_TEAMS],\n  ['NBA', NBA_TEAMS],\n  ['NFL', NFL_TEAMS],\n  ['NHL', NHL_TEAMS],\n]);\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { COLOURS, DEFAULT_COLOUR, getTeamColour } from './colours';\nimport { Day, monthName, numDaysInMonth, generateCalendar } from './date-utils';\nimport { getSchedule } from './espn-client';\nimport { Game } from './games';\nimport './index.css';\nimport { presets } from './presets';\nimport { LEAGUES, TEAMS } from './teams';\n\nconst ADD_SYMBOL = '➕';\nconst REMOVE_SYMBOL = '✖️';\nconst PREVIOUS_SYMBOL = '←';\nconst NEXT_SYMBOL = '→️';\n\ntype FavouriteTeam = {\n  league: string;\n  teamCode: string;\n  colour: string;\n  games: Game[];\n};\n\nfunction getTeamId(league: string, teamCode: string): string {\n  return `${league}_${teamCode}`;\n}\n\nfunction getLeagueAndTeamCode(teamId: string): [string, string] {\n  const splitId = teamId.split('_');\n  if (splitId.length !== 2) {\n    throw new Error('Invalid team ID!');\n  }\n  return splitId as [string, string];\n}\n\nfunction getTeamName(league: string, teamCode: string): string {\n  return TEAMS.get(league)?.[teamCode] ?? 'Team Not Found';\n}\n\nfunction defaultTeam(league: string): string {\n  if (league === 'NFL') {\n    return 'BUF';\n  }\n  return 'TOR';\n}\n\ntype CalendarDayProps = {\n  day: Day;\n  isToday: boolean;\n};\n\nfunction CalendarDay(props: CalendarDayProps): JSX.Element {\n  const { day, isToday } = props;\n  return (\n    <div\n      className={`day ${isToday ? 'today' : ''}`}\n      style={{ gridArea: `${day.week + 1} / ${day.dayOfWeek} / span 1 / span 1` }}\n    >\n      <span style={{ textAlign: 'center' }}>{day.date}</span>\n      {Array.from(day.games.entries())\n        .sort(([, game1], [, game2]) => game1.timeString.localeCompare(game2.timeString))\n        .map(([, game]) => (\n          <div className={`game ${isToday ? 'i' : ''}${game.colour}`} key={game.description}>\n            {game.description}\n          </div>\n        ))}\n    </div>\n  );\n}\n\ntype FavouriteTeamCardProps = {\n  teamName: string;\n  colour: string;\n  removeFromFavourites: () => void;\n};\n\nfunction FavouriteTeamCard(props: FavouriteTeamCardProps): JSX.Element {\n  const { teamName, colour, removeFromFavourites } = props;\n\n  return (\n    <div className={`favourite-team ${colour}`}>\n      <span>{teamName}</span>\n      <button className=\"remove-button\" onClick={removeFromFavourites}>\n        {REMOVE_SYMBOL}\n      </button>\n    </div>\n  );\n}\n\ntype TeamPickerProps = {\n  addToFavourites: (league: string, team: string, colour: string) => void;\n  usedColours: string[];\n};\n\nfunction TeamPicker(props: TeamPickerProps) {\n  const { addToFavourites, usedColours } = props;\n\n  const [pendingLeague, setPendingLeague] = useState(LEAGUES[0]);\n  const [pendingTeam, setPendingTeam] = useState(defaultTeam(pendingLeague));\n  const [colour, setColour] = useState(DEFAULT_COLOUR);\n\n  useEffect(() => {\n    if (!(pendingTeam in (TEAMS.get(pendingLeague) ?? {}))) {\n      setPendingTeam(defaultTeam(pendingLeague));\n    }\n  }, [pendingLeague]);\n\n  useEffect(() => {\n    setColour(getTeamColour(pendingLeague, pendingTeam, usedColours));\n  }, [pendingLeague, pendingTeam]);\n\n  return (\n    <div className={`new-team ${colour}`}>\n      <select\n        className=\"league-select\"\n        onChange={(event) => {\n          setPendingLeague(event.target.value);\n        }}\n        value={pendingLeague}\n      >\n        {LEAGUES.map((league) => (\n          <option key={league} value={league}>\n            {league}\n          </option>\n        ))}\n      </select>\n      <select\n        className=\"team-select\"\n        onChange={(event) => {\n          setPendingTeam(event.target.value);\n        }}\n        value={pendingTeam}\n      >\n        {Object.entries(TEAMS.get(pendingLeague) ?? {})\n          .sort(([, teamName1], [, teamName2]) => teamName1.localeCompare(teamName2))\n          .map(([teamCode, teamName]) => (\n            <option key={teamCode} value={teamCode}>\n              {teamName}\n            </option>\n          ))}\n      </select>\n      <select\n        className=\"colour-select\"\n        onChange={(event) => {\n          setColour(event.target.value);\n        }}\n        value={colour}\n      >\n        {COLOURS.map((colourOption) => (\n          <option key={colourOption} value={colourOption}>\n            {colourOption}\n          </option>\n        ))}\n      </select>\n      <button\n        className=\"remove-button\"\n        onClick={() => {\n          addToFavourites(pendingLeague, pendingTeam, colour);\n        }}\n      >\n        {ADD_SYMBOL}\n      </button>\n    </div>\n  );\n}\n\nfunction App(): JSX.Element {\n  const currentDate = new Date();\n\n  const [month, setMonth] = useState(currentDate.getMonth());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [days, setDays] = useState<Day[]>([]);\n  const [favouriteTeams, setFavouriteTeams] = useState<Map<string, FavouriteTeam>>(new Map([]));\n  const [pendingFavouriteTeams, setPendingFavouriteTeams] = useState(new URLSearchParams());\n\n  useEffect(() => {\n    setDays(generateCalendar(numDaysInMonth(month, year), new Date(year, month, 1).getDay()));\n  }, [year, month]);\n\n  useEffect(() => {\n    favouriteTeams.forEach((favTeam) => {\n      setDays((oldDays) => {\n        const newDays = [...oldDays];\n        for (const game of favTeam.games) {\n          if (game.date.getFullYear() === year && game.date.getMonth() === month) {\n            const day = { ...newDays[game.date.getDate() - 1] };\n            const dayGames = new Map(day.games);\n            dayGames.set(game.description, { ...game, colour: favTeam.colour });\n            day.games = dayGames;\n            newDays[game.date.getDate() - 1] = day;\n          }\n        }\n        return newDays;\n      });\n    });\n  }, [year, month, favouriteTeams]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    setPendingFavouriteTeams(params);\n    params.forEach(async (colour, teamId) => {\n      try {\n        if (favouriteTeams.has(teamId)) {\n          return;\n        }\n        const [league, teamCode] = getLeagueAndTeamCode(teamId);\n        const games = await getSchedule(league, teamCode);\n        setFavouriteTeams((oldFavouriteTeams) => {\n          const newFavouriteTeams = new Map(oldFavouriteTeams);\n          newFavouriteTeams.set(teamId, {\n            league,\n            teamCode,\n            colour: COLOURS.includes(colour) ? colour : DEFAULT_COLOUR,\n            games,\n          });\n          return newFavouriteTeams;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  }, []);\n\n  const addToFavourites = (league: string, teamCode: string, colour: string) => {\n    setPendingFavouriteTeams((oldTeams) => {\n      const newTeams = new URLSearchParams(oldTeams);\n      newTeams.set(getTeamId(league, teamCode), colour);\n      return newTeams;\n    });\n  };\n\n  const removeFromFavourites = (league: string, teamCode: string) => {\n    setPendingFavouriteTeams((oldTeams) => {\n      const newTeams = new URLSearchParams(oldTeams);\n      newTeams.delete(getTeamId(league, teamCode));\n      return newTeams;\n    });\n  };\n\n  const applyChanges = () => {\n    window.location.search = pendingFavouriteTeams.toString();\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>\n        <button\n          className=\"previous-button\"\n          onClick={() => {\n            let newMonth = month - 1;\n            if (newMonth < 0) {\n              setYear((oldYear) => oldYear - 1);\n              newMonth += 12;\n            }\n            setMonth(newMonth);\n          }}\n        >\n          {PREVIOUS_SYMBOL}\n        </button>\n        {monthName(month)} {year}\n        <button\n          className=\"next-button\"\n          onClick={() => {\n            let newMonth = month + 1;\n            if (newMonth > 11) {\n              setYear((oldYear) => oldYear + 1);\n              newMonth %= 12;\n            }\n            setMonth(newMonth);\n          }}\n        >\n          {NEXT_SYMBOL}\n        </button>\n      </h2>\n      <div className=\"grid-container\">\n        {days.map((day: Day) => (\n          <CalendarDay\n            key={day.date}\n            day={day}\n            isToday={\n              currentDate.getDate() === day.date &&\n              currentDate.getMonth() === month &&\n              currentDate.getFullYear() === year\n            }\n          />\n        ))}\n      </div>\n      {Array.from(pendingFavouriteTeams.entries()).map(([teamId, colour]) => {\n        const [league, teamCode] = getLeagueAndTeamCode(teamId);\n        return (\n          <FavouriteTeamCard\n            key={teamId}\n            teamName={getTeamName(league, teamCode)}\n            colour={colour}\n            removeFromFavourites={() => {\n              removeFromFavourites(league, teamCode);\n            }}\n          />\n        );\n      })}\n      <TeamPicker\n        usedColours={Array.from(pendingFavouriteTeams.values()).map((colour) => colour)}\n        addToFavourites={addToFavourites}\n      />\n      <button onClick={applyChanges}>Apply Changes</button>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <p>\n      All schedule data comes from the{' '}\n      <a href=\"https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b\">ESPN API</a>. I have no affiliation\n      with ESPN or any professional sports organization, and I cannot attest to the accuracy of the data.\n    </p>\n    <p>\n      You can select your own favourite teams in the tool above, but I&apos;ve also prepared some presets based on\n      likely combinations of favourite teams. My own configuration is available{' '}\n      <a href=\"/sports-schedule?MLB_TOR=Royal&NHL_TOR=Navy&NBA_TOR=Purple&MLB_NYM=Orange&NFL_BUF=Red\">here</a> and here\n      are some for various regions with multiple teams:{' '}\n      {presets.map(([location, query], idx) => (\n        <>\n          {idx === 0 || <span>, </span>}\n          <a key={location} href={`/sports-schedule${query}`}>\n            {location}\n          </a>\n        </>\n      ))}\n      . For areas with multiple teams in the same league, I realize most fans likely cheer for one or the other, but\n      starting with a link to all of them should make it easier to customize.\n    </p>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","export const presets: [string, string][] = [\n  ['Anaheim', '?MLB_LAA=Red&NHL_ANA=Orange'],\n  ['Atlanta', '?MLB_ATL=Navy&NBA_ATL=Red&NFL_ATL=Black'],\n  ['Baltimore', '?MLB_BAL=Orange&NFL_BAL=Purple'],\n  ['Boston', '?MLB_BOS=Red&NBA_BOS=Green&NFL_NE=Navy&NHL_BOS=Yellow'],\n  ['Buffalo', '?NFL_BUF=Royal&NHL_BUF=Yellow'],\n  ['Chicago', '?MLB_CHC=Royal&MLB_CHW=Silver&NBA_CHI=Black&NFL_CHI=Orange&NHL_CHI=Red'],\n  ['Cincinnati', '?MLB_CIN=Red&NFL_CIN=Orange'],\n  ['Cleveland', '?MLB_CLE=Navy&NBA_CLE=Brick&NFL_CLE=Orange'],\n  ['Dallas-Fort Worth', '?MLB_TEX=Red&NBA_DAL=Royal&NFL_DAL=Navy&NHL_DAL=Green'],\n  ['Denver', '?MLB_COL=Purple&NBA_DEN=Sky&NFL_DEN=Orange&NHL_COL=Brick'],\n  ['Detroit', '?MLB_DET=Orange&NBA_DET=Royal&NFL_DET=Silver&NHL_DET=Red'],\n  ['Houston', '?MLB_HOU=Orange&NBA_HOU=Red&NFL_HOU=Navy'],\n  ['Indianapolis', '?NBA_IND=Yellow&NFL_IND=Royal'],\n  ['Kansas City', '?MLB_KC=Royal&NFL_KC=Red'],\n  ['Las Vegas', '?NFL_LV=Black&NHL_VGS=Gold'],\n  ['Los Angeles', '?MLB_LAD=Royal&NBA_LAC=Red&NBA_LAL=Purple&NFL_LAC=Sky&NFL_LAR=Yellow&NHL_LA=Black'],\n  ['Miami', '?MLB_MIA=Black&NBA_MIA=Pink&NFL_MIA=Teal&NHL_FLA=Red'],\n  ['Minneapolis-Saint Paul', '?MLB_MIN=Red&NBA_MIN=Navy&NFL_MIN=Purple&NHL_MIN=Green'],\n  ['New Orleans', '?NBA_NO=Navy&NFL_NO=Gold'],\n  [\n    'New York',\n    '?MLB_NYM=Pink&MLB_NYY=Navy&NBA_BKN=Black&NBA_NY=Orange&NFL_NYG=Silver&NFL_NYJ=Green&NHL_NJ=Red&NHL_NYI=Teal&NHL_NYR=Royal',\n  ],\n  ['North Carolina', '?NBA_CHA=Purple&NFL_CAR=Sky&NHL_CAR=Red'],\n  ['Philadelphia', '?MLB_PHI=Red&NBA_PHI=Royal&NFL_PHI=Teal&NHL_PHI=Orange'],\n  ['Phoenix', '?MLB_ARI=Brick&NBA_PHX=Purple&NFL_ARI=Red&NHL_ARI=Black'],\n  ['Pittsburgh', '?MLB_PIT=Yellow&NFL_PIT=Black&NHL_PIT=Sky'],\n  ['San Francisco Bay Area', '?MLB_OAK=Green&MLB_SF=Orange&NBA_GS=Royal&NFL_SF=Red&NHL_SJ=Teal'],\n  ['Seattle', '?MLB_SEA=Teal&NFL_SEA=Navy'],\n  ['St. Louis', '?MLB_STL=Red&NHL_STL=Royal'],\n  ['Tampa Bay', '?MLB_TB=Sky&NFL_TB=Red&NHL_TB=Royal'],\n  ['Tennessee', '?NBA_MEM=Sky&NFL_TEN=Navy&NHL_NSH=Yellow'],\n  ['Toronto', '?MLB_TOR=Royal&NBA_TOR=Red&NHL_TOR=Navy'],\n  ['Washington', '?MLB_WSH=Navy&NBA_WSH=Silver&NFL_WSH=Brick&NHL_WSH=Red'],\n  ['Wisconsin', '?MLB_MIL=Navy&NBA_MIL=Purple&NFL_GB=Green'],\n];\n"],"sourceRoot":""}