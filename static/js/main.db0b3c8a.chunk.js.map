{"version":3,"sources":["colours.ts","date-utils.ts","espn-client.ts","teams.ts","index.tsx"],"names":["RED","BRICK","BROWN","ORANGE","YELLOW","GOLD","GREEN","TEAL","SKY","ROYAL","NAVY","PURPLE","PINK","BLACK","SILVER","GREY","BASIC_COLOURS","COLOURS","DEFAULT_COLOUR","MLB_COLOURS","Map","NBA_COLOURS","NFL_COLOURS","NHL_COLOURS","TEAM_COLOURS","MONTHS","monthName","month","URLS","espnToNative","espn","teamOfInterest","shortName","split","away","home","opponentString","date","Date","getSchedule","league","teamCode","a","has","Error","url","get","fetch","json","events","map","LEAGUES","TEAMS","ARI","ATL","BAL","BOS","CHC","CIN","CLE","COL","CHW","DET","HOU","KC","LAA","LAD","MIA","MIL","MIN","NYM","NYY","OAK","PHI","PIT","SD","SEA","SF","STL","TB","TEX","TOR","WSH","BKN","CHA","CHI","DAL","DEN","GS","IND","LAC","LAL","MEM","NO","NY","OKC","ORL","PHX","POR","SA","SAC","UTH","BUF","CAR","GB","JAX","LAR","LV","NE","NYG","NYJ","TEN","ANA","CBJ","CGY","EDM","FLA","LA","MTL","NJ","NSH","NYI","NYR","OTT","SJ","VAN","VGS","WPG","getTeamId","getTeamName","defaultTeam","CalendarDay","props","day","className","style","gridArea","week","dayOfWeek","textAlign","FavouriteTeamCard","teamName","colour","numGames","removeTeam","onClick","TeamPicker","addToFavourites","usedColours","useState","pendingLeague","setPendingLeague","pendingTeam","setPendingTeam","setColour","useEffect","team","includes","getTeamColour","onChange","event","target","value","Object","entries","colourOption","App","currentDate","getMonth","setMonth","getFullYear","year","setYear","days","setDays","favouriteTeams","setFavouriteTeams","numDays","firstDay","getDate","numDaysInMonth","getDay","Array","from","length","_","i","Math","floor","getGamesFor","favTeam","games","oldFavouriteTeams","newFavouriteTeams","teamId","newTeam","set","forEach","params","URLSearchParams","window","location","search","oldParams","toString","newParams","newFavouriteTeamKey","splitId","getLeagueAndTeamCode","newMonth","oldYear","delete","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db0b3c8a.chunk.js","sourcesContent":["export const RED = 'Red';\nexport const BRICK = 'Brick';\nexport const BROWN = 'Brown';\nexport const ORANGE = 'Orange';\nexport const YELLOW = 'Yellow';\nexport const GOLD = 'Gold';\nexport const GREEN = 'Green';\nexport const TEAL = 'Teal';\nexport const SKY = 'Sky';\nexport const ROYAL = 'Royal';\nexport const NAVY = 'Navy';\nexport const PURPLE = 'Purple';\nexport const PINK = 'Pink';\nexport const BLACK = 'Black';\nexport const SILVER = 'Silver';\nexport const GREY = 'Grey';\n\nconst BASIC_COLOURS = [RED, ROYAL, GREEN, PURPLE, ORANGE, YELLOW, BLACK, SKY];\nexport const COLOURS = [\n  RED,\n  BRICK,\n  BROWN,\n  ORANGE,\n  YELLOW,\n  GOLD,\n  GREEN,\n  TEAL,\n  SKY,\n  ROYAL,\n  NAVY,\n  PURPLE,\n  PINK,\n  BLACK,\n  SILVER,\n  GREY,\n];\nexport const DEFAULT_COLOUR = BLACK;\n\nexport const MLB_COLOURS = new Map<string, string[]>([\n  ['ARI', [BRICK, BLACK, PURPLE, TEAL, RED]],\n  ['ATL', [NAVY, RED, ROYAL, SKY, YELLOW]],\n  ['BAL', [ORANGE, BLACK]],\n  ['BOS', [RED, NAVY, GREEN]],\n  ['CHC', [ROYAL, RED, NAVY, SKY, BRICK]],\n  ['CIN', [RED, BRICK, BLACK, NAVY]],\n  ['CLE', [NAVY, RED]],\n  ['COL', [PURPLE, SILVER, BLACK]],\n  ['CHW', [BLACK, SILVER, RED]],\n  ['DET', [NAVY, ORANGE, GREY]],\n  ['HOU', [ORANGE, NAVY, ROYAL]],\n  ['KC', [ROYAL, GOLD, SKY]],\n  ['LAA', [RED, NAVY, SKY, YELLOW]],\n  ['LAD', [ROYAL, SKY, RED, NAVY]],\n  ['MIA', [BLACK, SKY, TEAL, ORANGE, PINK, RED, YELLOW]],\n  ['MIL', [NAVY, YELLOW, ROYAL, GOLD, GREEN]],\n  ['MIN', [NAVY, RED, ORANGE, SKY, GOLD]],\n  ['NYM', [ROYAL, ORANGE, BLACK, PINK]],\n  ['NYY', [NAVY, SILVER, GREY]],\n  ['OAK', [GREEN, YELLOW]],\n  ['PHI', [RED, ROYAL, BRICK, SKY]],\n  ['PIT', [YELLOW, BLACK, RED, GOLD]],\n  ['SD', [BROWN, YELLOW, ORANGE, NAVY, SKY]],\n  ['SEA', [TEAL, NAVY, ROYAL, YELLOW, GREY]],\n  ['SF', [ORANGE, BLACK, GOLD]],\n  ['STL', [RED, NAVY, YELLOW, SKY]],\n  ['TB', [SKY, NAVY, PURPLE, GREEN, YELLOW, BLACK]],\n  ['TEX', [ROYAL, RED, SKY]],\n  ['TOR', [ROYAL, NAVY, SKY, RED, GREY]],\n  ['WSH', [NAVY, RED, SILVER, GREY]],\n]);\n\nconst NBA_COLOURS = new Map<string, string[]>([\n  ['ATL', [RED, BLACK, YELLOW, NAVY, SILVER, ROYAL, GREEN]],\n  ['BKN', [BLACK, SILVER, GREY, SKY, NAVY, RED, ROYAL]],\n  ['BOS', [GREEN, GOLD, YELLOW, ORANGE]],\n  ['CHA', [TEAL, PURPLE]],\n  ['CHI', [RED, BLACK, SILVER]],\n  ['CLE', [BRICK, YELLOW, NAVY, GOLD, ORANGE, SKY, RED]],\n  ['DAL', [ROYAL, NAVY, SILVER, GREY, BLACK, GREEN]],\n  ['DEN', [NAVY, BRICK, YELLOW, SKY]],\n  ['DET', [ROYAL, RED, TEAL, BLACK]],\n  ['GS', [ROYAL, YELLOW, NAVY, ORANGE, SKY, GOLD]],\n  ['HOU', [RED, BLACK, GREY, SILVER, YELLOW]],\n  ['IND', [NAVY, YELLOW, ROYAL]],\n  ['LAC', [RED, ROYAL, BLACK, SKY, ORANGE]],\n  ['LAL', [PURPLE, YELLOW, BLACK, SKY, ROYAL]],\n  ['MEM', [SKY, NAVY, YELLOW, TEAL, BLACK, RED, BROWN]],\n  ['MIA', [RED, BLACK, PINK, SKY, YELLOW, ORANGE, BRICK]],\n  ['MIL', [GREEN, BROWN, RED, PURPLE]],\n  ['MIN', [ROYAL, NAVY, SILVER, GREEN, GREY, BLACK]],\n  ['NO', [NAVY, GOLD, RED, BRICK, PURPLE, GREEN, YELLOW]],\n  ['NY', [ROYAL, ORANGE, BLACK]],\n  ['OKC', [SKY, ORANGE, YELLOW, NAVY, ROYAL]],\n  ['ORL', [BLACK, ROYAL, SILVER, ORANGE]],\n  ['PHI', [ROYAL, RED, BLACK, GOLD]],\n  ['PHX', [PURPLE, ORANGE, YELLOW, BLACK]],\n  ['POR', [BLACK, RED, SILVER, GREY]],\n  ['SAC', [PURPLE, SILVER, BLACK, GREY, SKY, RED]],\n  ['SA', [BLACK, SILVER, TEAL, PINK, ORANGE]],\n  ['TOR', [RED, PURPLE, BLACK, GOLD]],\n  ['UTH', [NAVY, YELLOW, GREEN, PURPLE, SKY, ORANGE, RED, BRICK]],\n  ['WSH', [NAVY, RED, SILVER, GOLD, ROYAL, BLACK]],\n]);\n\nconst NFL_COLOURS = new Map<string, string[]>([\n  ['ARI', [RED, BRICK, BLACK, YELLOW, GREY]],\n  ['ATL', [BLACK, RED, BRICK, SILVER, GREY]],\n  ['BAL', [PURPLE, BLACK, GOLD, YELLOW, RED]],\n  ['BUF', [ROYAL, RED]],\n  ['CAR', [SKY, BLACK, SILVER]],\n  ['CHI', [NAVY, ORANGE]],\n  ['CIN', [ORANGE, BLACK]],\n  ['CLE', [BROWN, ORANGE]],\n  ['DAL', [NAVY, SILVER, ROYAL]],\n  ['DEN', [NAVY, ORANGE, BROWN, YELLOW, ROYAL]],\n  ['DET', [SKY, SILVER, ROYAL, BLACK]],\n  ['GB', [GREEN, YELLOW, NAVY]],\n  ['HOU', [NAVY, RED, SKY]],\n  ['IND', [ROYAL, NAVY, BLACK]],\n  ['JAX', [TEAL, GOLD, BLACK, YELLOW]],\n  ['KC', [RED, YELLOW]],\n  ['LAC', [SKY, YELLOW, NAVY, ROYAL]],\n  ['LAR', [ROYAL, YELLOW, NAVY, GOLD]],\n  ['LV', [BLACK, SILVER]],\n  ['MIA', [TEAL, ORANGE]],\n  ['MIN', [PURPLE, YELLOW]],\n  ['NE', [NAVY, SILVER, RED, ROYAL]],\n  ['NO', [GOLD, BLACK]],\n  ['NYG', [NAVY, RED, ROYAL]],\n  ['NYJ', [GREEN, BLACK]],\n  ['PHI', [TEAL, GREEN, SILVER, BLACK]],\n  ['PIT', [YELLOW, BLACK, SILVER]],\n  ['SEA', [NAVY, SILVER, GREEN, ROYAL]],\n  ['SF', [RED, GOLD, BRICK, BLACK]],\n  ['TB', [RED, ORANGE, GREY, BLACK, BROWN]],\n  ['TEN', [SKY, NAVY, RED, SILVER]],\n  ['WSH', [BRICK, YELLOW, GOLD, BROWN]],\n]);\n\nconst NHL_COLOURS = new Map<string, string[]>([\n  ['ANA', [ORANGE, GOLD, BLACK, PURPLE, TEAL]],\n  ['ARI', [BRICK, BLACK, GREEN, PURPLE, ORANGE, RED]],\n  ['BOS', [YELLOW, BLACK, BROWN, GOLD]],\n  ['BUF', [ROYAL, YELLOW, NAVY, SILVER, GOLD, BLACK, RED]],\n  ['CAR', [RED, BLACK, SILVER, GREY, GREEN, NAVY, ROYAL, BRICK]],\n  ['CBJ', [NAVY, RED, SILVER, YELLOW]],\n  ['CGY', [RED, YELLOW, BLACK, BRICK]],\n  ['CHI', [RED, BLACK, YELLOW, ORANGE, GREEN]],\n  ['COL', [BRICK, SKY, NAVY, SILVER, ROYAL, BLACK, RED, YELLOW]],\n  ['DAL', [GREEN, BLACK, SILVER, GOLD, YELLOW]],\n  ['DET', [RED, PURPLE, SILVER, GREY, BLACK]],\n  ['EDM', [ORANGE, ROYAL, NAVY, SILVER, GREY]],\n  ['FLA', [RED, NAVY, GOLD, YELLOW, BRICK]],\n  ['LA', [BLACK, SILVER, PURPLE, YELLOW, GREY]],\n  ['MIN', [GREEN, BRICK, RED, YELLOW]],\n  ['MTL', [RED, ROYAL, NAVY]],\n  ['NJ', [RED, BLACK, GREEN]],\n  ['NSH', [YELLOW, NAVY, SILVER, ROYAL]],\n  ['NYI', [ROYAL, ORANGE, NAVY, TEAL, BLACK]],\n  ['NYR', [ROYAL, RED, NAVY, SILVER]],\n  ['OTT', [RED, BLACK, GOLD, BRICK, YELLOW]],\n  ['PHI', [ORANGE, BLACK]],\n  ['PIT', [YELLOW, BLACK, GOLD, SKY, NAVY, ROYAL, GREY]],\n  ['SJ', [TEAL, BLACK, SILVER, ORANGE, GREY]],\n  ['STL', [ROYAL, NAVY, YELLOW, RED, BRICK]],\n  ['TB', [ROYAL, SILVER, BLACK, GREY]],\n  ['TOR', [ROYAL, NAVY, GREEN, SILVER]],\n  ['VAN', [ROYAL, NAVY, GREEN, BRICK, YELLOW, RED, BLACK, ORANGE, SILVER]],\n  ['VGS', [GOLD, GREY, BLACK, YELLOW, RED, SILVER]],\n  ['WPG', [NAVY, SKY, GREY, SILVER, ROYAL, RED]],\n  ['WSH', [RED, NAVY, ROYAL, GOLD, BLACK]],\n]);\n\nconst TEAM_COLOURS = new Map<string, Map<string, string[]>>([\n  ['MLB', MLB_COLOURS],\n  ['NBA', NBA_COLOURS],\n  ['NFL', NFL_COLOURS],\n  ['NHL', NHL_COLOURS],\n]);\n\nexport function getTeamColour(league: string, team: string, usedColours: string[]): string {\n  for (const colour of TEAM_COLOURS.get(league)?.get(team) ?? []) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  for (const colour of BASIC_COLOURS) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  for (const colour of COLOURS) {\n    if (!usedColours.includes(colour)) {\n      return colour;\n    }\n  }\n  return BLACK;\n}\n","export type Day = {\n  date: number;\n  week: number;\n  dayOfWeek: number;\n};\n\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport function monthName(month: number): string {\n  return MONTHS[month];\n}\n\nexport function numDaysInMonth(month: number, year: number): number {\n  // NB: Months are 0-indexed (i.e. January = 0). Day 0 of the following month is the last day of the given month.\n  return new Date(year, month + 1, 0).getDate();\n}\n\nexport function generateCalendar(numDays: number, firstDay: number): Day[] {\n  return [\n    ...Array.from({ length: numDays }, (_, i) => ({\n      date: i + 1,\n      dayOfWeek: ((i + firstDay) % 7) + 1,\n      week: Math.floor((i + firstDay) / 7) + 1,\n    })),\n  ];\n}\n","import { Game } from './games';\n\nconst URLS: Map<string, string> = new Map([\n  ['MLB', 'http://site.api.espn.com/apis/site/v2/sports/baseball/mlb/teams/'],\n  ['NBA', 'http://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/'],\n  ['NFL', 'http://site.api.espn.com/apis/site/v2/sports/football/nfl/teams/'],\n  ['NHL', 'http://site.api.espn.com/apis/site/v2/sports/hockey/nhl/teams/'],\n]);\n\ntype ESPNGame = {\n  date: string;\n  shortName: string;\n};\n\nfunction espnToNative(espn: ESPNGame, teamOfInterest: string): Game {\n  const [away, , home] = espn.shortName.split(' ');\n  let opponentString = '';\n  if (away === teamOfInterest) {\n    opponentString = `@${home}`;\n  } else {\n    opponentString = `v${away}`;\n  }\n  return { opponentString, date: new Date(espn.date) };\n}\n\nexport async function getSchedule(league: string, teamCode: string): Promise<Game[]> {\n  if (!URLS.has(league)) {\n    throw new Error(`Given value ${league} is not a known league.`);\n  }\n  const url = `${URLS.get(league)}${teamCode}/schedule`;\n  const events: ESPNGame[] = (await (await fetch(url)).json()).events;\n  return events.map((espn) => espnToNative(espn, teamCode));\n}\n","export const LEAGUES = ['MLB', 'NBA', 'NFL', 'NHL'];\n\nexport const MLB_TEAMS = {\n  ARI: 'Arizona Diamondbacks',\n  ATL: 'Atlanta Braves',\n  BAL: 'Baltimore Orioles',\n  BOS: 'Boston Red Sox',\n  CHC: 'Chicago Cubs',\n  CIN: 'Cincinnati Reds',\n  CLE: 'Cleveland Baseball Team',\n  COL: 'Colorado Rockies',\n  CHW: 'Chicago White Sox',\n  DET: 'Detroit Tigers',\n  HOU: 'Houston Astros',\n  KC: 'Kansas City Royals',\n  LAA: 'Los Angeles Angels',\n  LAD: 'Los Angeles Dodgers',\n  MIA: 'Miami Marlins',\n  MIL: 'Milwaukee Brewers',\n  MIN: 'Minnesota Twins',\n  NYM: 'New York Mets',\n  NYY: 'New York Yankees',\n  OAK: \"Oakland A's\",\n  PHI: 'Philadelphia Phillies',\n  PIT: 'Pittsburgh Pirates',\n  SD: 'San Diego Padres',\n  SEA: 'Seattle Mariners',\n  SF: 'San Francisco Giants',\n  STL: 'St. Louis Cardinals',\n  TB: 'Tampa Bay Rays',\n  TEX: 'Texas Rangers',\n  TOR: 'Toronto Blue Jays',\n  WSH: 'Washington Nationals',\n};\n\nexport const NBA_TEAMS = {\n  ATL: 'Atlanta Hawks',\n  BKN: 'Brooklyn Nets',\n  BOS: 'Boston Celtics',\n  CHA: 'Charlotte Hornets',\n  CHI: 'Chicago Bulls',\n  CLE: 'Cleveland Cavaliers',\n  DAL: 'Dallas Mavericks',\n  DEN: 'Denver Nuggets',\n  DET: 'Detroit Pistons',\n  GS: 'Golden State Warriors',\n  HOU: 'Houston Rockets',\n  IND: 'Indiana Pacers',\n  LAC: 'Los Angeles Clippers',\n  LAL: 'Los Angeles Lakers',\n  MEM: 'Memphis Grizzlies',\n  MIA: 'Miami Heat',\n  MIL: 'Milwaukee Bucks',\n  MIN: 'Minnesota Timberwolves',\n  NO: 'New Orleans Pelicans',\n  NY: 'New York Knicks',\n  OKC: 'Oklahoma City Thunder',\n  ORL: 'Orlando Magic',\n  PHI: 'Philadelphia 76ers',\n  PHX: 'Phoenix Suns',\n  POR: 'Portland Trail Blazers',\n  SA: 'San Antonio Spurs',\n  SAC: 'Sacramento Kings',\n  TOR: 'Toronto Raptors',\n  UTH: 'Utah Jazz',\n  WSH: 'Washington Wizards',\n};\n\nexport const NFL_TEAMS = {\n  ARI: 'Arizona Cardinals',\n  ATL: 'Atlanta Falcons',\n  BAL: 'Baltimore Ravens',\n  BUF: 'Buffalo Bills',\n  CAR: 'Carolina Panthers',\n  CHI: 'Chicago Bears',\n  CIN: 'Cincinnati Bengals',\n  CLE: 'Cleveland Browns',\n  DAL: 'Dallas Cowboys',\n  DEN: 'Denver Broncos',\n  DET: 'Detroit Lions',\n  GB: 'Green Bay Packers',\n  HOU: 'Houston Texans',\n  IND: 'Indianapolis Colts',\n  JAX: 'Jacksonville Jaguars',\n  KC: 'Kansas City Chiefs',\n  LAC: 'Los Angeles Chargers',\n  LAR: 'Los Angeles Rams',\n  LV: 'Las Vegas Raiders',\n  MIA: 'Miami Dolphins',\n  MIN: 'Minnesota Vikings',\n  NE: 'New England Patriots',\n  NO: 'New Orleans Saints',\n  NYG: 'New York Giants',\n  NYJ: 'New York Jets',\n  PHI: 'Philadelphia Eagles',\n  PIT: 'Pittsburgh Steelers',\n  SEA: 'Seattle Seahawks',\n  SF: 'San Francisco 49ers',\n  TB: 'Tampa Bay Buccaneers',\n  TEN: 'Tennessee Titans',\n  WSH: 'Washington Football Team',\n};\n\nexport const NHL_TEAMS = {\n  ANA: 'Anaheim Ducks',\n  ARI: 'Arizona Coyotes',\n  BOS: 'Boston Bruins',\n  BUF: 'Buffalo Sabres',\n  CAR: 'Carolina Hurricanes',\n  CBJ: 'Columbus Blue Jackets',\n  CGY: 'Calgary Flames',\n  CHI: 'Chicago Blackhawks',\n  COL: 'Colorado Avalanche',\n  DAL: 'Dallas Stars',\n  DET: 'Detroit Red Wings',\n  EDM: 'Edmonton Oilers',\n  FLA: 'Florida Panthers',\n  LA: 'Los Angeles Kings',\n  MIN: 'Minnesota Wild',\n  MTL: 'Montréal Canadiens',\n  NJ: 'New Jersey Devils',\n  NSH: 'Nashville Predators',\n  NYI: 'New York Islanders',\n  NYR: 'New York Rangers',\n  OTT: 'Ottawa Senators',\n  PHI: 'Philadelphia Flyers',\n  PIT: 'Pittsburgh Penguins',\n  SJ: 'San Jose Sharks',\n  STL: 'St. Louis Blues',\n  TB: 'Tampa Bay Lightning',\n  TOR: 'Toronto Maple Leafs',\n  VAN: 'Vancouver Canucks',\n  VGS: 'Vegas Golden Knights',\n  WPG: 'Winnipeg Jets',\n  WSH: 'Washington Capitals',\n};\n\nexport const TEAMS = new Map<string, Record<string, string>>([\n  ['MLB', MLB_TEAMS],\n  ['NBA', NBA_TEAMS],\n  ['NFL', NFL_TEAMS],\n  ['NHL', NHL_TEAMS],\n]);\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { COLOURS, DEFAULT_COLOUR, getTeamColour } from './colours';\nimport { Day, monthName, numDaysInMonth, generateCalendar } from './date-utils';\nimport { getSchedule } from './espn-client';\nimport { Game } from './games';\nimport './index.css';\nimport { LEAGUES, TEAMS } from './teams';\n\nconst ADD_SYMBOL = '➕';\nconst REMOVE_SYMBOL = '✖️';\nconst PREVIOUS_SYMBOL = '⬅️';\nconst NEXT_SYMBOL = '➡️';\n\ntype FavouriteTeam = {\n  league: string;\n  teamCode: string;\n  colour: string;\n  games: Game[];\n};\n\nfunction getTeamId(league: string, teamCode: string): string {\n  return `${league}_${teamCode}`;\n}\n\nfunction getLeagueAndTeamCode(teamId: string): [string, string] {\n  const splitId = teamId.split('_');\n  if (splitId.length !== 2) {\n    throw new Error('Invalid team ID!');\n  }\n  return splitId as [string, string];\n}\n\nfunction getTeamName(league: string, teamCode: string): string {\n  return TEAMS.get(league)?.[teamCode] ?? 'Team Not Found';\n}\n\nfunction defaultTeam(league: string): string {\n  if (league === 'NFL') {\n    return 'BUF';\n  }\n  return 'TOR';\n}\n\ntype CalendarDayProps = {\n  day: Day;\n};\n\nfunction CalendarDay(props: CalendarDayProps): JSX.Element {\n  const { day } = props;\n  return (\n    <div className=\"day\" style={{ gridArea: `${day.week + 1} / ${day.dayOfWeek} / span 1 / span 1` }}>\n      <span style={{ textAlign: 'center' }}>{day.date}</span>\n    </div>\n  );\n}\n\ntype FavouriteTeamCardProps = {\n  teamName: string;\n  colour: string;\n  numGames: number;\n  removeTeam: () => void;\n};\n\nfunction FavouriteTeamCard(props: FavouriteTeamCardProps): JSX.Element {\n  const { teamName, colour, numGames, removeTeam } = props;\n\n  return (\n    <div className={`favourite-team ${colour}`}>\n      <span>{`${teamName} (${numGames})`}</span>\n      <button className=\"remove-button\" onClick={removeTeam}>\n        {REMOVE_SYMBOL}\n      </button>\n    </div>\n  );\n}\n\ntype TeamPickerProps = {\n  addToFavourites: (league: string, team: string, colour: string) => void;\n  usedColours: string[];\n};\n\nfunction TeamPicker(props: TeamPickerProps) {\n  const { addToFavourites, usedColours } = props;\n\n  const [pendingLeague, setPendingLeague] = useState(LEAGUES[0]);\n  const [pendingTeam, setPendingTeam] = useState(defaultTeam(pendingLeague));\n  const [colour, setColour] = useState(DEFAULT_COLOUR);\n\n  useEffect(() => {\n    if (!(pendingTeam in (TEAMS.get(pendingLeague) ?? {}))) {\n      setPendingTeam(defaultTeam(pendingLeague));\n    }\n  }, [pendingLeague]);\n\n  useEffect(() => {\n    setColour(getTeamColour(pendingLeague, pendingTeam, usedColours));\n  }, [pendingLeague, pendingTeam]);\n\n  return (\n    <div className={`new-team ${colour}`}>\n      <select\n        className=\"league-select\"\n        onChange={(event) => {\n          setPendingLeague(event.target.value);\n        }}\n        value={pendingLeague}\n      >\n        {LEAGUES.map((league) => (\n          <option key={league} value={league}>\n            {league}\n          </option>\n        ))}\n      </select>\n      <select\n        className=\"team-select\"\n        onChange={(event) => {\n          setPendingTeam(event.target.value);\n        }}\n        value={pendingTeam}\n      >\n        {Object.entries(TEAMS.get(pendingLeague) ?? {}).map(([teamCode, teamName]) => (\n          <option key={teamCode} value={teamCode}>\n            {teamName}\n          </option>\n        ))}\n      </select>\n      <select\n        className=\"colour-select\"\n        onChange={(event) => {\n          setColour(event.target.value);\n        }}\n        value={colour}\n      >\n        {COLOURS.map((colourOption) => (\n          <option key={colourOption} value={colourOption}>\n            {colourOption}\n          </option>\n        ))}\n      </select>\n      <button\n        className=\"remove-button\"\n        onClick={() => {\n          addToFavourites(pendingLeague, pendingTeam, colour);\n        }}\n      >\n        {ADD_SYMBOL}\n      </button>\n    </div>\n  );\n}\n\nfunction App(): JSX.Element {\n  const currentDate = new Date();\n\n  const [month, setMonth] = useState(currentDate.getMonth());\n  const [year, setYear] = useState(currentDate.getFullYear());\n  const [days, setDays] = useState<Day[]>([]);\n  const [favouriteTeams, setFavouriteTeams] = useState<Map<string, FavouriteTeam>>(new Map([]));\n\n  useEffect(() => {\n    setDays(generateCalendar(numDaysInMonth(month, year), new Date(year, month, 1).getDay()));\n  }, [year, month]);\n\n  useEffect(() => {\n    const getGamesFor = async (favTeam: FavouriteTeam) => {\n      if (favTeam.games.length > 0) {\n        return;\n      }\n      const games = await getSchedule(favTeam.league, favTeam.teamCode);\n      setFavouriteTeams((oldFavouriteTeams) => {\n        const newFavouriteTeams = new Map(oldFavouriteTeams);\n        const teamId = getTeamId(favTeam.league, favTeam.teamCode);\n        const team = newFavouriteTeams.get(teamId);\n        if (team) {\n          const newTeam = { ...team };\n          newTeam.games = games;\n          newFavouriteTeams.set(teamId, newTeam);\n        }\n        return newFavouriteTeams;\n      });\n    };\n    favouriteTeams.forEach((favTeam) => {\n      getGamesFor(favTeam);\n    });\n  }, [favouriteTeams]);\n\n  const addToFavourites = (league: string, teamCode: string, colour: string) => {\n    const params = new URLSearchParams(window.location.search);\n    const oldParams = params.toString();\n    params.set(getTeamId(league, teamCode), colour);\n    const newParams = params.toString();\n    if (oldParams !== newParams) {\n      window.location.search = newParams;\n      return;\n    }\n    setFavouriteTeams((oldFavouriteTeams) => {\n      const newFavouriteTeamKey = getTeamId(league, teamCode);\n      if (oldFavouriteTeams.has(newFavouriteTeamKey)) {\n        return oldFavouriteTeams;\n      }\n      const newFavouriteTeams = new Map(oldFavouriteTeams);\n      newFavouriteTeams.set(newFavouriteTeamKey, {\n        league,\n        teamCode,\n        colour: COLOURS.includes(colour) ? colour : DEFAULT_COLOUR,\n        games: [],\n      });\n      return newFavouriteTeams;\n    });\n  };\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    params.forEach((colour, teamId) => {\n      try {\n        const [league, teamCode] = getLeagueAndTeamCode(teamId);\n        addToFavourites(league, teamCode, colour);\n      } catch {\n        return;\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h2>\n        <button\n          className=\"previous-button\"\n          onClick={() => {\n            let newMonth = month - 1;\n            if (newMonth < 0) {\n              setYear((oldYear) => oldYear - 1);\n              newMonth += 12;\n            }\n            setMonth(newMonth);\n          }}\n        >\n          {PREVIOUS_SYMBOL}\n        </button>\n        {monthName(month)} {year}\n        <button\n          className=\"next-button\"\n          onClick={() => {\n            let newMonth = month + 1;\n            if (newMonth > 11) {\n              setYear((oldYear) => oldYear + 1);\n              newMonth %= 12;\n            }\n            setMonth(newMonth);\n          }}\n        >\n          {NEXT_SYMBOL}\n        </button>\n      </h2>\n      <div className=\"grid-container\">\n        {days.map((day: Day) => (\n          <CalendarDay key={day.date} day={day} />\n        ))}\n      </div>\n      {Array.from(favouriteTeams.entries()).map(([teamId, favTeam]: [string, FavouriteTeam]) => (\n        <FavouriteTeamCard\n          key={teamId}\n          teamName={getTeamName(favTeam.league, favTeam.teamCode)}\n          colour={favTeam.colour}\n          numGames={favTeam.games.length}\n          removeTeam={() => {\n            setFavouriteTeams((oldFavouriteTeams) => {\n              const newFavouriteTeams = new Map(oldFavouriteTeams);\n              newFavouriteTeams.delete(getTeamId(favTeam.league, favTeam.teamCode));\n              return newFavouriteTeams;\n            });\n          }}\n        />\n      ))}\n      <TeamPicker\n        usedColours={Array.from(favouriteTeams.values()).map((favTeam) => favTeam.colour)}\n        addToFavourites={addToFavourites}\n      />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}